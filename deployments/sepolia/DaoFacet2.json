{
  "address": "0x83D681a2Bce0610F2a7310c5CbD3F3470E154A5d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Voter",
          "name": "voter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionVotes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "proposalOptions",
          "type": "tuple[]"
        }
      ],
      "name": "VoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "checkVotingStatus",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum ProposalStatus",
              "name": "proposalStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "optionText",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "vote",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Option[]",
              "name": "options",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "voterAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionIndexes",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionVotes",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Voter[]",
              "name": "voters",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Proposal[]",
          "name": "proposalsArray",
          "type": "tuple[]"
        }
      ],
      "name": "getProposalIndex",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalsArray",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum ProposalStatus",
              "name": "proposalStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "optionText",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "vote",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Option[]",
              "name": "options",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "voterAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionIndexes",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionVotes",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Voter[]",
              "name": "voters",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "voteProposalBySingleChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByWeighing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x37c5ae07a5d1c3be739dfd1a2f7b4de68e3d5165785fc02f223f770a3c2998fc",
  "receipt": {
    "to": null,
    "from": "0xec2B1547294a4dd62C0aE651aEb01493f8e4cD74",
    "contractAddress": "0x83D681a2Bce0610F2a7310c5CbD3F3470E154A5d",
    "transactionIndex": 65,
    "gasUsed": "4381241",
    "logsBloom": "0x
    "blockHash": "0xa91543592fea4f682b65c112384d63b1f8761de5ed4abc31bde4b33d523992d6",
    "transactionHash": "0x37c5ae07a5d1c3be739dfd1a2f7b4de68e3d5165785fc02f223f770a3c2998fc",
    "logs": [],
    "blockNumber": 5780772,
    "cumulativeGasUsed": "12037748",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7d889f57bbc75ecac3d4f707135d75d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Voter\",\"name\":\"voter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"proposalOptions\",\"type\":\"tuple[]\"}],\"name\":\"VoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"checkVotingStatus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Proposal[]\",\"name\":\"proposalsArray\",\"type\":\"tuple[]\"}],\"name\":\"getProposalIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalsArray\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"voteProposalBySingleChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByWeighing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DaoFacet2.sol\":\"DaoFacet2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0xae05cf87494ddb159206d4e9d277720a7723b23320721d506e68837d6e0658e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/facets/DaoFacet2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport {AppStorage, ProposalType, ProposalStatus, Option, Voter, Proposal} from \\\"../libraries/LibAppStorage.sol\\\";\\r\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\r\\n\\r\\ncontract DaoFacet2 is ReentrancyGuard {\\r\\n    AppStorage internal s;\\r\\n    \\r\\n    event VoteCreated(\\r\\n        uint id,\\r\\n        uint[] optionVotes,\\r\\n        uint[] optionIndexes,\\r\\n        address voterAddress,\\r\\n        Option[] proposalOptions\\r\\n    );\\r\\n\\r\\n    event Vote(uint256 id, Voter voter, Option[] options);\\r\\n\\r\\n    function voteProposalBySingleChoice(\\r\\n        uint256 id,\\r\\n        uint256 index,\\r\\n        uint256 votingPower\\r\\n    ) external nonReentrant {\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = s.proposals[id];\\r\\n\\r\\n        require(\\r\\n            proposal.proposalType == ProposalType.SingleChoice,\\r\\n            \\\"single choice voting not allowed\\\"\\r\\n        );\\r\\n\\r\\n        console.log(\\\"block.timestamp: \\\", block.timestamp );\\r\\n        console.log(\\\"proposal.startDAta: \\\", proposal.startDate );\\r\\n        console.log(\\\"proposal.duration: \\\", proposal.duration );\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"Voted already\\\");\\r\\n        require(\\r\\n            s.larToken.balanceOf(msg.sender) >= votingPower,\\r\\n            \\\"Insufficient VP\\\"\\r\\n        );\\r\\n\\r\\n        s.larToken.transferFrom(msg.sender, address(this), votingPower);\\r\\n\\r\\n        s.proposals[id].options[index].vote += votingPower;\\r\\n\\r\\n        uint[] memory optionIndex = new uint[](1);\\r\\n        optionIndex[0] = index;\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](1);\\r\\n        optionVotes[0] = votingPower;\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: optionIndex,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        s.proposals[id].voters.push(voter);\\r\\n\\r\\n        // Update proposalsArray\\r\\n        int proposalIndex = getProposalIndex(id, s.proposalsArray);\\r\\n        require(\\r\\n            proposalIndex != -1,\\r\\n            \\\"Proposal cannot be found\\\"\\r\\n        );\\r\\n\\r\\n        delete s.proposalsArray[uint(proposalIndex)];\\r\\n\\r\\n        s.proposalsArray[uint(proposalIndex)] = s.proposals[id];\\r\\n\\r\\n        emit Vote(id, voter, s.proposals[id].options);\\r\\n        emit VoteCreated(\\r\\n            id,\\r\\n            optionVotes,\\r\\n            optionIndex,\\r\\n            msg.sender,\\r\\n            s.proposals[id].options\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function voteProposalByWeighing(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = s.proposals[id];\\r\\n\\r\\n        require(\\r\\n            proposal.proposalType == ProposalType.Weighted,\\r\\n            \\\"weighted voting not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"Voted already\\\");\\r\\n        require(\\r\\n            s.larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient VP\\\"\\r\\n        );\\r\\n        s.larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = s.proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            options[currentOptionIndex].vote += currentOptionVotingPower;\\r\\n        }\\r\\n\\r\\n        // Voter[] voters = proposal.voters\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: votingPower\\r\\n        });\\r\\n\\r\\n        s.proposals[id].voters.push(voter);\\r\\n\\r\\n        // Update proposalsArray\\r\\n        int proposalIndex = getProposalIndex(id, s.proposalsArray);\\r\\n        require(\\r\\n            proposalIndex != -1,\\r\\n            \\\"Proposal cannot be found\\\"\\r\\n        );\\r\\n\\r\\n        delete s.proposalsArray[uint(proposalIndex)];\\r\\n\\r\\n        s.proposalsArray[uint(proposalIndex)] = s.proposals[id];\\r\\n\\r\\n        emit Vote(id, voter, options);\\r\\n        emit VoteCreated(\\r\\n            id,\\r\\n            votingPower,\\r\\n            indexes,\\r\\n            msg.sender,\\r\\n            s.proposals[id].options\\r\\n        );\\r\\n    }\\r\\n\\r\\n     function getProposalIndex(\\r\\n        uint id,\\r\\n        Proposal[] memory proposalsArray\\r\\n    ) public pure returns (int256) {\\r\\n        for (uint i = 0; i < proposalsArray.length; i++) {\\r\\n            Proposal memory currentProposal = proposalsArray[i];\\r\\n            if (currentProposal.id == id) {\\r\\n                return int(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function getTotalVotingPower(\\r\\n        uint256[] memory votingPower\\r\\n    ) internal pure returns (uint256 totalVotingPower) {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingStatus(\\r\\n        uint256 id,\\r\\n        address voter\\r\\n    ) public view returns (int256) {\\r\\n        Voter[] memory voters = s.proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function getProposalsArray() external view returns (Proposal[] memory) {\\r\\n        return s.proposalsArray;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe6bda6fd52b04fc56bd4f5231d5bfbb44c8332d274fc2fc49684d4fc8bc322fb\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n\\r\\n/*\\r\\n    export interface Proposal {\\r\\n        id: string;\\r\\n        creator: string;\\r\\n        description: string;\\r\\n        duration: number;\\r\\n        proposalStatus: string;\\r\\n        proposalType: string;\\r\\n        latestOptions: string[][] | undefined;\\r\\n        startDate: number;\\r\\n        endDate: number;\\r\\n        status: string;\\r\\n        timeLeft: number;\\r\\n        title: string;\\r\\n        optionsArray: {\\r\\n            optionIndex: string;\\r\\n            optionText: string;\\r\\n            optionVote: string;\\r\\n            optionPercentage: string;\\r\\n        }[];\\r\\n        validOptions: string[][];\\r\\n\\r\\n    }\\r\\n\\r\\n*/\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    \\r\\n  proposal1 = {\\r\\n      latestOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      optionsArray: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      validOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n\\r\\n\\r\\n  allProposals = [proposal1, proposal2, proposal3, e.t.c.]\\r\\n  \\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  Whenever someone votes, the proposalsArray has to be updated. The mapping to has to be updated\\r\\n    \\r\\n     */\\r\\n\\r\\n\\r\\n    \\r\\nstruct AppStorage {\\r\\n    uint256 totalSupply;\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(address => uint256)) allowances;\\r\\n    mapping(address => Counters.Counter) nonces;  \\r\\n\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    mapping(uint256 => Proposal) proposals;\\r\\n\\r\\n    uint256[] proposalsList;\\r\\n\\r\\n    Proposal[] proposalsArray;\\r\\n\\r\\n    uint256[] proposalsId;\\r\\n\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage {\\r\\n    // diamondStorage() returns the position of the App storage struct in the diamond contract\\r\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\r\\n        assembly {\\r\\n            ds.slot := 0\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x179cda448f2848044be22f29a693ce529977d96aa436670c209278f6be466026\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550614e05806100286000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806350d2d30a1461005c57806397ae1535146100785780639a234175146100a8578063da12935c146100c4578063e6eccba2146100f4575b600080fd5b610076600480360381019061007191906132e8565b610112565b005b610092600480360381019061008d91906139ff565b61125c565b60405161009f9190613a74565b60405180910390f35b6100c260048036038101906100bd9190613a8f565b6112e0565b005b6100de60048036038101906100d99190613ae2565b612573565b6040516100eb9190613a74565b60405180910390f35b6100fc61279a565b6040516101099190614109565b60405180910390f35b61011a612c75565b600061012582612cc4565b905060006101338533612573565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546101c99061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546101f59061415a565b80156102425780601f1061021757610100808354040283529160200191610242565b820191906000526020600020905b81548152906001019060200180831161022557829003601f168201915b5050505050815260200160038201805461025b9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546102879061415a565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561030257610301613beb565b5b600281111561031457610313613beb565b5b81526020016004820160019054906101000a900460ff16600281111561033d5761033c613beb565b5b600281111561034f5761034e613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156104645783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546103c99061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546103f59061415a565b80156104425780601f1061041757610100808354040283529160200191610442565b820191906000526020600020905b81548152906001019060200180831161042557829003601f168201915b505050505081526020016002820154815250508152602001906001019061038c565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156105c957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561055957602002820191906000526020600020905b815481526020019060010190808311610545575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156105b157602002820191906000526020600020905b81548152602001906001019080831161059d575b50505050508152505081526020019060010190610491565b50505050815250509050600160028111156105e7576105e6613beb565b5b816080015160028111156105fe576105fd613beb565b5b1461063e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610635906141e8565b60405180910390fd5b8060e001518160c001516106529190614237565b4210610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a906142b7565b60405180910390fd5b600082126106d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90614323565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107359190614352565b602060405180830381865afa158015610752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107769190614382565b10156107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae906143fb565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016108199392919061442a565b6020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190614499565b50600060016006016000888152602001908152602001600020600701905060005b865181101561091457600087828151811061089b5761089a6144c6565b5b6020026020010151905060008783815181106108ba576108b96144c6565b5b60200260200101519050808483815481106108d8576108d76144c6565b5b906000526020600020906003020160020160008282546108f89190614237565b925050819055505050808061090c906144f5565b91505061087d565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906109f0929190612ddd565b506040820151816002019080519060200190610a0d929190612ddd565b5050506000610eef896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610ee6578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610acf9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054610afb9061415a565b8015610b485780601f10610b1d57610100808354040283529160200191610b48565b820191906000526020600020905b815481529060010190602001808311610b2b57829003601f168201915b50505050508152602001600382018054610b619061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8d9061415a565b8015610bda5780601f10610baf57610100808354040283529160200191610bda565b820191906000526020600020905b815481529060010190602001808311610bbd57829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610c0857610c07613beb565b5b6002811115610c1a57610c19613beb565b5b81526020016004820160019054906101000a900460ff166002811115610c4357610c42613beb565b5b6002811115610c5557610c54613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610d6a578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610ccf9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb9061415a565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610c92565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610ecf57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610e5f57602002820191906000526020600020905b815481526020019060010190808311610e4b575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610eb757602002820191906000526020600020905b815481526020019060010190808311610ea3575b50505050508152505081526020019060010190610d97565b505050508152505081526020019060010190610a3b565b5050505061125c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90614589565b60405180910390fd5b60016008018181548110610f6a57610f696144c6565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610fb89190612e2a565b600382016000610fc89190612e2a565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110109190612e6a565b6008820160006110209190612e8e565b5050600160060160008a81526020019081526020016000206001600801828154811061104f5761104e6144c6565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816110e2919061476b565b50600382018160030190816110f7919061476b565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360028111156111305761112f613beb565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561116d5761116c613beb565b5b02179055506005820154816005015560068201548160060155600782018160070190805461119c929190612eb2565b5060088201816008019080546111b3929190612f33565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983856040516111ea93929190614a8c565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489888a33600160060160008f8152602001908152602001600020600701604051611241959493929190614be1565b60405180910390a1505050505050611257612d16565b505050565b600080600090505b82518110156112b5576000838281518110611282576112816144c6565b5b60200260200101519050848160000151036112a15781925050506112da565b5080806112ad906144f5565b915050611264565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b6112e8612c75565b60006112f48433612573565b905060006001600601600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461138a9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546113b69061415a565b80156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b5050505050815260200160038201805461141c9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546114489061415a565b80156114955780601f1061146a57610100808354040283529160200191611495565b820191906000526020600020905b81548152906001019060200180831161147857829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156114c3576114c2613beb565b5b60028111156114d5576114d4613beb565b5b81526020016004820160019054906101000a900460ff1660028111156114fe576114fd613beb565b5b60028111156115105761150f613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561162557838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461158a9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546115b69061415a565b80156116035780601f106115d857610100808354040283529160200191611603565b820191906000526020600020905b8154815290600101906020018083116115e657829003601f168201915b505050505081526020016002820154815250508152602001906001019061154d565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561178a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561171a57602002820191906000526020600020905b815481526020019060010190808311611706575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561177257602002820191906000526020600020905b81548152602001906001019080831161175e575b50505050508152505081526020019060010190611652565b50505050815250509050600060028111156117a8576117a7613beb565b5b816080015160028111156117bf576117be613beb565b5b146117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690614c95565b60405180910390fd5b61183e6040518060400160405280601181526020017f626c6f636b2e74696d657374616d703a2000000000000000000000000000000081525042612d20565b6118816040518060400160405280601481526020017f70726f706f73616c2e7374617274444174613a200000000000000000000000008152508260c00151612d20565b6118c46040518060400160405280601381526020017f70726f706f73616c2e6475726174696f6e3a20000000000000000000000000008152508260e00151612d20565b8060e001518160c001516118d89190614237565b4210611919576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611910906142b7565b60405180910390fd5b6000821261195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195390614323565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016119bb9190614352565b602060405180830381865afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc9190614382565b1015611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a34906143fb565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611a9f9392919061442a565b6020604051808303816000875af1158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae29190614499565b5082600160060160008781526020019081526020016000206007018581548110611b0f57611b0e6144c6565b5b90600052602060002090600302016002016000828254611b2f9190614237565b925050819055506000600167ffffffffffffffff811115611b5357611b526131a5565b5b604051908082528060200260200182016040528015611b815781602001602082028036833780820191505090505b5090508481600081518110611b9957611b986144c6565b5b6020026020010181815250506000600167ffffffffffffffff811115611bc257611bc16131a5565b5b604051908082528060200260200182016040528015611bf05781602001602082028036833780820191505090505b5090508481600081518110611c0857611c076144c6565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611cef929190612ddd565b506040820151816002019080519060200190611d0c929190612ddd565b50505060006121ee896001600801805480602002602001604051908101604052809291908181526020016000905b828210156121e5578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611dce9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa9061415a565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b50505050508152602001600382018054611e609061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8c9061415a565b8015611ed95780601f10611eae57610100808354040283529160200191611ed9565b820191906000526020600020905b815481529060010190602001808311611ebc57829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611f0757611f06613beb565b5b6002811115611f1957611f18613beb565b5b81526020016004820160019054906101000a900460ff166002811115611f4257611f41613beb565b5b6002811115611f5457611f53613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612069578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611fce9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ffa9061415a565b80156120475780601f1061201c57610100808354040283529160200191612047565b820191906000526020600020905b81548152906001019060200180831161202a57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611f91565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156121ce57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561215e57602002820191906000526020600020905b81548152602001906001019080831161214a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156121b657602002820191906000526020600020905b8154815260200190600101908083116121a2575b50505050508152505081526020019060010190612096565b505050508152505081526020019060010190611d3a565b5050505061125c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103612252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224990614589565b60405180910390fd5b60016008018181548110612269576122686144c6565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006122b79190612e2a565b6003820160006122c79190612e2a565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff02191690556005820160009055600682016000905560078201600061230f9190612e6a565b60088201600061231f9190612e8e565b5050600160060160008a81526020019081526020016000206001600801828154811061234e5761234d6144c6565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816123e1919061476b565b50600382018160030190816123f6919061476b565b506004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600281111561242f5761242e613beb565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561246c5761246b613beb565b5b02179055506005820154816005015560068201548160060155600782018160070190805461249b929190612eb2565b5060088201816008019080546124b2929190612f33565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d815260200190815260200160002060070160405161250193929190614cb5565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848633600160060160008f8152602001908152602001600020600701604051612558959493929190614be1565b60405180910390a150505050505061256e612d16565b505050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156126e757838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561267757602002820191906000526020600020905b815481526020019060010190808311612663575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156126cf57602002820191906000526020600020905b8154815260200190600101908083116126bb575b505050505081525050815260200190600101906125af565b50505050905060005b815181101561276e57600082828151811061270e5761270d6144c6565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361275a57819350505050612794565b508080612766906144f5565b9150506126f0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b60606001600801805480602002602001604051908101604052809291908181526020016000905b82821015612c6c578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546128559061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546128819061415a565b80156128ce5780601f106128a3576101008083540402835291602001916128ce565b820191906000526020600020905b8154815290600101906020018083116128b157829003601f168201915b505050505081526020016003820180546128e79061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546129139061415a565b80156129605780601f1061293557610100808354040283529160200191612960565b820191906000526020600020905b81548152906001019060200180831161294357829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561298e5761298d613beb565b5b60028111156129a05761299f613beb565b5b81526020016004820160019054906101000a900460ff1660028111156129c9576129c8613beb565b5b60028111156129db576129da613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612af0578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054612a559061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054612a819061415a565b8015612ace5780601f10612aa357610100808354040283529160200191612ace565b820191906000526020600020905b815481529060010190602001808311612ab157829003601f168201915b5050505050815260200160028201548152505081526020019060010190612a18565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612c5557838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015612be557602002820191906000526020600020905b815481526020019060010190808311612bd1575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612c3d57602002820191906000526020600020905b815481526020019060010190808311612c29575b50505050508152505081526020019060010190612b1d565b5050505081525050815260200190600101906127c1565b50505050905090565b600260005403612cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb190614d46565b60405180910390fd5b6002600081905550565b600080600090505b8251811015612d1057828181518110612ce857612ce76144c6565b5b602002602001015182612cfb9190614237565b91508080612d08906144f5565b915050612ccc565b50919050565b6001600081905550565b612db88282604051602401612d36929190614d9f565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612dbc565b5050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b828054828255906000526020600020908101928215612e19579160200282015b82811115612e18578251825591602001919060010190612dfd565b5b509050612e269190613020565b5090565b508054612e369061415a565b6000825580601f10612e485750612e67565b601f016020900490600052602060002090810190612e669190613020565b5b50565b5080546000825560030290600052602060002090810190612e8b919061303d565b50565b5080546000825560030290600052602060002090810190612eaf9190613074565b50565b828054828255906000526020600020906003028101928215612f225760005260206000209160030282015b82811115612f215782826000820154816000015560018201816001019081612f05919061476b565b5060028201548160020155505091600301919060030190612edd565b5b509050612f2f919061303d565b5090565b82805482825590600052602060002090600302810192821561300f5760005260206000209160030282015b8281111561300e5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820181600101908054612fe59291906130d2565b506002820181600201908054612ffc9291906130d2565b50505091600301919060030190612f5e565b5b50905061301c9190613074565b5090565b5b80821115613039576000816000905550600101613021565b5090565b5b808211156130705760008082016000905560018201600061305f9190612e2a565b60028201600090555060030161303e565b5090565b5b808211156130ce57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006130b59190613124565b6002820160006130c59190613124565b50600301613075565b5090565b8280548282559060005260206000209081019282156131135760005260206000209182015b828111156131125782548255916001019190600101906130f7565b5b5090506131209190613020565b5090565b50805460008255906000526020600020908101906131429190613020565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61316c81613159565b811461317757600080fd5b50565b60008135905061318981613163565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131dd82613194565b810181811067ffffffffffffffff821117156131fc576131fb6131a5565b5b80604052505050565b600061320f613145565b905061321b82826131d4565b919050565b600067ffffffffffffffff82111561323b5761323a6131a5565b5b602082029050602081019050919050565b600080fd5b600061326461325f84613220565b613205565b905080838252602082019050602084028301858111156132875761328661324c565b5b835b818110156132b0578061329c888261317a565b845260208401935050602081019050613289565b5050509392505050565b600082601f8301126132cf576132ce61318f565b5b81356132df848260208601613251565b91505092915050565b6000806000606084860312156133015761330061314f565b5b600061330f8682870161317a565b935050602084013567ffffffffffffffff8111156133305761332f613154565b5b61333c868287016132ba565b925050604084013567ffffffffffffffff81111561335d5761335c613154565b5b613369868287016132ba565b9150509250925092565b600067ffffffffffffffff82111561338e5761338d6131a5565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133d4826133a9565b9050919050565b6133e4816133c9565b81146133ef57600080fd5b50565b600081359050613401816133db565b92915050565b600080fd5b600067ffffffffffffffff821115613427576134266131a5565b5b61343082613194565b9050602081019050919050565b82818337600083830152505050565b600061345f61345a8461340c565b613205565b90508281526020810184848401111561347b5761347a613407565b5b61348684828561343d565b509392505050565b600082601f8301126134a3576134a261318f565b5b81356134b384826020860161344c565b91505092915050565b600381106134c957600080fd5b50565b6000813590506134db816134bc565b92915050565b600381106134ee57600080fd5b50565b600081359050613500816134e1565b92915050565b600067ffffffffffffffff821115613521576135206131a5565b5b602082029050602081019050919050565b6000606082840312156135485761354761339f565b5b6135526060613205565b905060006135628482850161317a565b600083015250602082013567ffffffffffffffff811115613586576135856133a4565b5b6135928482850161348e565b60208301525060406135a68482850161317a565b60408301525092915050565b60006135c56135c084613506565b613205565b905080838252602082019050602084028301858111156135e8576135e761324c565b5b835b8181101561362f57803567ffffffffffffffff81111561360d5761360c61318f565b5b80860161361a8982613532565b855260208501945050506020810190506135ea565b5050509392505050565b600082601f83011261364e5761364d61318f565b5b813561365e8482602086016135b2565b91505092915050565b600067ffffffffffffffff821115613682576136816131a5565b5b602082029050602081019050919050565b6000606082840312156136a9576136a861339f565b5b6136b36060613205565b905060006136c3848285016133f2565b600083015250602082013567ffffffffffffffff8111156136e7576136e66133a4565b5b6136f3848285016132ba565b602083015250604082013567ffffffffffffffff811115613717576137166133a4565b5b613723848285016132ba565b60408301525092915050565b600061374261373d84613667565b613205565b905080838252602082019050602084028301858111156137655761376461324c565b5b835b818110156137ac57803567ffffffffffffffff81111561378a5761378961318f565b5b8086016137978982613693565b85526020850194505050602081019050613767565b5050509392505050565b600082601f8301126137cb576137ca61318f565b5b81356137db84826020860161372f565b91505092915050565b600061014082840312156137fb576137fa61339f565b5b613806610140613205565b905060006138168482850161317a565b600083015250602061382a848285016133f2565b602083015250604082013567ffffffffffffffff81111561384e5761384d6133a4565b5b61385a8482850161348e565b604083015250606082013567ffffffffffffffff81111561387e5761387d6133a4565b5b61388a8482850161348e565b606083015250608061389e848285016134cc565b60808301525060a06138b2848285016134f1565b60a08301525060c06138c68482850161317a565b60c08301525060e06138da8482850161317a565b60e08301525061010082013567ffffffffffffffff8111156138ff576138fe6133a4565b5b61390b84828501613639565b6101008301525061012082013567ffffffffffffffff811115613931576139306133a4565b5b61393d848285016137b6565b6101208301525092915050565b600061395d61395884613373565b613205565b905080838252602082019050602084028301858111156139805761397f61324c565b5b835b818110156139c757803567ffffffffffffffff8111156139a5576139a461318f565b5b8086016139b289826137e4565b85526020850194505050602081019050613982565b5050509392505050565b600082601f8301126139e6576139e561318f565b5b81356139f684826020860161394a565b91505092915050565b60008060408385031215613a1657613a1561314f565b5b6000613a248582860161317a565b925050602083013567ffffffffffffffff811115613a4557613a44613154565b5b613a51858286016139d1565b9150509250929050565b6000819050919050565b613a6e81613a5b565b82525050565b6000602082019050613a896000830184613a65565b92915050565b600080600060608486031215613aa857613aa761314f565b5b6000613ab68682870161317a565b9350506020613ac78682870161317a565b9250506040613ad88682870161317a565b9150509250925092565b60008060408385031215613af957613af861314f565b5b6000613b078582860161317a565b9250506020613b18858286016133f2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b5781613159565b82525050565b613b66816133c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ba6578082015181840152602081019050613b8b565b60008484015250505050565b6000613bbd82613b6c565b613bc78185613b77565b9350613bd7818560208601613b88565b613be081613194565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613c2b57613c2a613beb565b5b50565b6000819050613c3c82613c1a565b919050565b6000613c4c82613c2e565b9050919050565b613c5c81613c41565b82525050565b60038110613c7357613c72613beb565b5b50565b6000819050613c8482613c62565b919050565b6000613c9482613c76565b9050919050565b613ca481613c89565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000606083016000830151613cee6000860182613b4e565b5060208301518482036020860152613d068282613bb2565b9150506040830151613d1b6040860182613b4e565b508091505092915050565b6000613d328383613cd6565b905092915050565b6000602082019050919050565b6000613d5282613caa565b613d5c8185613cb5565b935083602082028501613d6e85613cc6565b8060005b85811015613daa5784840389528151613d8b8582613d26565b9450613d9683613d3a565b925060208a01995050600181019050613d72565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613e208383613b4e565b60208301905092915050565b6000602082019050919050565b6000613e4482613de8565b613e4e8185613df3565b9350613e5983613e04565b8060005b83811015613e8a578151613e718882613e14565b9750613e7c83613e2c565b925050600181019050613e5d565b5085935050505092915050565b6000606083016000830151613eaf6000860182613b5d565b5060208301518482036020860152613ec78282613e39565b91505060408301518482036040860152613ee18282613e39565b9150508091505092915050565b6000613efa8383613e97565b905092915050565b6000602082019050919050565b6000613f1a82613dbc565b613f248185613dc7565b935083602082028501613f3685613dd8565b8060005b85811015613f725784840389528151613f538582613eee565b9450613f5e83613f02565b925060208a01995050600181019050613f3a565b50829750879550505050505092915050565b600061014083016000830151613f9d6000860182613b4e565b506020830151613fb06020860182613b5d565b5060408301518482036040860152613fc88282613bb2565b91505060608301518482036060860152613fe28282613bb2565b9150506080830151613ff76080860182613c53565b5060a083015161400a60a0860182613c9b565b5060c083015161401d60c0860182613b4e565b5060e083015161403060e0860182613b4e565b5061010083015184820361010086015261404a8282613d47565b9150506101208301518482036101208601526140668282613f0f565b9150508091505092915050565b600061407f8383613f84565b905092915050565b6000602082019050919050565b600061409f82613b22565b6140a98185613b2d565b9350836020820285016140bb85613b3e565b8060005b858110156140f757848403895281516140d88582614073565b94506140e383614087565b925060208a019950506001810190506140bf565b50829750879550505050505092915050565b600060208201905081810360008301526141238184614094565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061417257607f821691505b6020821081036141855761418461412b565b5b50919050565b600082825260208201905092915050565b7f776569676874656420766f74696e67206e6f7420616c6c6f7765640000000000600082015250565b60006141d2601b8361418b565b91506141dd8261419c565b602082019050919050565b60006020820190508181036000830152614201816141c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061424282613159565b915061424d83613159565b925082820190508082111561426557614264614208565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b60006142a1600f8361418b565b91506142ac8261426b565b602082019050919050565b600060208201905081810360008301526142d081614294565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b600061430d600d8361418b565b9150614318826142d7565b602082019050919050565b6000602082019050818103600083015261433c81614300565b9050919050565b61434c816133c9565b82525050565b60006020820190506143676000830184614343565b92915050565b60008151905061437c81613163565b92915050565b6000602082840312156143985761439761314f565b5b60006143a68482850161436d565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b60006143e5600f8361418b565b91506143f0826143af565b602082019050919050565b60006020820190508181036000830152614414816143d8565b9050919050565b61442481613159565b82525050565b600060608201905061443f6000830186614343565b61444c6020830185614343565b614459604083018461441b565b949350505050565b60008115159050919050565b61447681614461565b811461448157600080fd5b50565b6000815190506144938161446d565b92915050565b6000602082840312156144af576144ae61314f565b5b60006144bd84828501614484565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061450082613159565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361453257614531614208565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b600061457360188361418b565b915061457e8261453d565b602082019050919050565b600060208201905081810360008301526145a281614566565b9050919050565b6000815490506145b88161415a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026146217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826145e4565b61462b86836145e4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061466861466361465e84613159565b614643565b613159565b9050919050565b6000819050919050565b6146828361464d565b61469661468e8261466f565b8484546145f1565b825550505050565b600090565b6146ab61469e565b6146b6818484614679565b505050565b5b818110156146da576146cf6000826146a3565b6001810190506146bc565b5050565b601f82111561471f576146f0816145bf565b6146f9846145d4565b81016020851015614708578190505b61471c614714856145d4565b8301826146bb565b50505b505050565b600082821c905092915050565b600061474260001984600802614724565b1980831691505092915050565b600061475b8383614731565b9150826002028217905092915050565b818103614779575050614851565b614782826145a9565b67ffffffffffffffff81111561479b5761479a6131a5565b5b6147a5825461415a565b6147b08282856146de565b6000601f8311600181146147df57600084156147cd578287015490505b6147d7858261474f565b86555061484a565b601f1984166147ed876145bf565b96506147f8866145bf565b60005b82811015614820578489015482556001820191506001850194506020810190506147fb565b8683101561483d5784890154614839601f891682614731565b8355505b6001600288020188555050505b5050505050505b565b600060608301600083015161486b6000860182613b5d565b50602083015184820360208601526148838282613e39565b9150506040830151848203604086015261489d8282613e39565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000614905614900836148db565b6148e8565b9050919050565b600081546149198161415a565b6149238186613b77565b9450600182166000811461493e576001811461495457614987565b60ff198316865281151560200286019350614987565b61495d856145bf565b60005b8381101561497f57815481890152600182019150602081019050614960565b808801955050505b50505092915050565b60006060830160008084015490506149a7816148f2565b6149b46000870182613b4e565b506001840185830360208701526149cb838261490c565b925050600284015490506149de816148f2565b6149eb6040870182613b4e565b50819250505092915050565b6000614a038383614990565b905092915050565b6000600382019050919050565b6000614a23826148aa565b614a2d81856148b5565b935083602082028501614a3f856148c6565b8060005b85811015614a7a57848403895281614a5b85826149f7565b9450614a6683614a0b565b925060208a01995050600181019050614a43565b50829750879550505050505092915050565b6000606082019050614aa1600083018661441b565b8181036020830152614ab38185614853565b90508181036040830152614ac78184614a18565b9050949350505050565b600082825260208201905092915050565b6000614aed82613de8565b614af78185614ad1565b9350614b0283613e04565b8060005b83811015614b33578151614b1a8882613e14565b9750614b2583613e2c565b925050600181019050614b06565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b6000614b7882614b40565b614b8281856148b5565b935083602082028501614b9485614b4b565b8060005b85811015614bcf57848403895281614bb085826149f7565b9450614bbb83614b60565b925060208a01995050600181019050614b98565b50829750879550505050505092915050565b600060a082019050614bf6600083018861441b565b8181036020830152614c088187614ae2565b90508181036040830152614c1c8186614ae2565b9050614c2b6060830185614343565b8181036080830152614c3d8184614b6d565b90509695505050505050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f776564600082015250565b6000614c7f60208361418b565b9150614c8a82614c49565b602082019050919050565b60006020820190508181036000830152614cae81614c72565b9050919050565b6000606082019050614cca600083018661441b565b8181036020830152614cdc8185614853565b90508181036040830152614cf08184614b6d565b9050949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614d30601f8361418b565b9150614d3b82614cfa565b602082019050919050565b60006020820190508181036000830152614d5f81614d23565b9050919050565b6000614d7182613b6c565b614d7b818561418b565b9350614d8b818560208601613b88565b614d9481613194565b840191505092915050565b60006040820190508181036000830152614db98185614d66565b9050614dc8602083018461441b565b939250505056fea26469706673582212209f415d03c588f762eb2b8021c93f8f841834c6a9af1112c5f4e246648858109e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806350d2d30a1461005c57806397ae1535146100785780639a234175146100a8578063da12935c146100c4578063e6eccba2146100f4575b600080fd5b610076600480360381019061007191906132e8565b610112565b005b610092600480360381019061008d91906139ff565b61125c565b60405161009f9190613a74565b60405180910390f35b6100c260048036038101906100bd9190613a8f565b6112e0565b005b6100de60048036038101906100d99190613ae2565b612573565b6040516100eb9190613a74565b60405180910390f35b6100fc61279a565b6040516101099190614109565b60405180910390f35b61011a612c75565b600061012582612cc4565b905060006101338533612573565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546101c99061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546101f59061415a565b80156102425780601f1061021757610100808354040283529160200191610242565b820191906000526020600020905b81548152906001019060200180831161022557829003601f168201915b5050505050815260200160038201805461025b9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546102879061415a565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561030257610301613beb565b5b600281111561031457610313613beb565b5b81526020016004820160019054906101000a900460ff16600281111561033d5761033c613beb565b5b600281111561034f5761034e613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156104645783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546103c99061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546103f59061415a565b80156104425780601f1061041757610100808354040283529160200191610442565b820191906000526020600020905b81548152906001019060200180831161042557829003601f168201915b505050505081526020016002820154815250508152602001906001019061038c565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156105c957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561055957602002820191906000526020600020905b815481526020019060010190808311610545575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156105b157602002820191906000526020600020905b81548152602001906001019080831161059d575b50505050508152505081526020019060010190610491565b50505050815250509050600160028111156105e7576105e6613beb565b5b816080015160028111156105fe576105fd613beb565b5b1461063e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610635906141e8565b60405180910390fd5b8060e001518160c001516106529190614237565b4210610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a906142b7565b60405180910390fd5b600082126106d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90614323565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107359190614352565b602060405180830381865afa158015610752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107769190614382565b10156107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae906143fb565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016108199392919061442a565b6020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190614499565b50600060016006016000888152602001908152602001600020600701905060005b865181101561091457600087828151811061089b5761089a6144c6565b5b6020026020010151905060008783815181106108ba576108b96144c6565b5b60200260200101519050808483815481106108d8576108d76144c6565b5b906000526020600020906003020160020160008282546108f89190614237565b925050819055505050808061090c906144f5565b91505061087d565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906109f0929190612ddd565b506040820151816002019080519060200190610a0d929190612ddd565b5050506000610eef896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610ee6578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610acf9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054610afb9061415a565b8015610b485780601f10610b1d57610100808354040283529160200191610b48565b820191906000526020600020905b815481529060010190602001808311610b2b57829003601f168201915b50505050508152602001600382018054610b619061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8d9061415a565b8015610bda5780601f10610baf57610100808354040283529160200191610bda565b820191906000526020600020905b815481529060010190602001808311610bbd57829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610c0857610c07613beb565b5b6002811115610c1a57610c19613beb565b5b81526020016004820160019054906101000a900460ff166002811115610c4357610c42613beb565b5b6002811115610c5557610c54613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610d6a578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610ccf9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb9061415a565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610c92565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610ecf57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610e5f57602002820191906000526020600020905b815481526020019060010190808311610e4b575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610eb757602002820191906000526020600020905b815481526020019060010190808311610ea3575b50505050508152505081526020019060010190610d97565b505050508152505081526020019060010190610a3b565b5050505061125c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90614589565b60405180910390fd5b60016008018181548110610f6a57610f696144c6565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610fb89190612e2a565b600382016000610fc89190612e2a565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110109190612e6a565b6008820160006110209190612e8e565b5050600160060160008a81526020019081526020016000206001600801828154811061104f5761104e6144c6565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816110e2919061476b565b50600382018160030190816110f7919061476b565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360028111156111305761112f613beb565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561116d5761116c613beb565b5b02179055506005820154816005015560068201548160060155600782018160070190805461119c929190612eb2565b5060088201816008019080546111b3929190612f33565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983856040516111ea93929190614a8c565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489888a33600160060160008f8152602001908152602001600020600701604051611241959493929190614be1565b60405180910390a1505050505050611257612d16565b505050565b600080600090505b82518110156112b5576000838281518110611282576112816144c6565b5b60200260200101519050848160000151036112a15781925050506112da565b5080806112ad906144f5565b915050611264565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b6112e8612c75565b60006112f48433612573565b905060006001600601600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461138a9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546113b69061415a565b80156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b5050505050815260200160038201805461141c9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546114489061415a565b80156114955780601f1061146a57610100808354040283529160200191611495565b820191906000526020600020905b81548152906001019060200180831161147857829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156114c3576114c2613beb565b5b60028111156114d5576114d4613beb565b5b81526020016004820160019054906101000a900460ff1660028111156114fe576114fd613beb565b5b60028111156115105761150f613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561162557838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461158a9061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546115b69061415a565b80156116035780601f106115d857610100808354040283529160200191611603565b820191906000526020600020905b8154815290600101906020018083116115e657829003601f168201915b505050505081526020016002820154815250508152602001906001019061154d565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561178a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561171a57602002820191906000526020600020905b815481526020019060010190808311611706575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561177257602002820191906000526020600020905b81548152602001906001019080831161175e575b50505050508152505081526020019060010190611652565b50505050815250509050600060028111156117a8576117a7613beb565b5b816080015160028111156117bf576117be613beb565b5b146117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690614c95565b60405180910390fd5b61183e6040518060400160405280601181526020017f626c6f636b2e74696d657374616d703a2000000000000000000000000000000081525042612d20565b6118816040518060400160405280601481526020017f70726f706f73616c2e7374617274444174613a200000000000000000000000008152508260c00151612d20565b6118c46040518060400160405280601381526020017f70726f706f73616c2e6475726174696f6e3a20000000000000000000000000008152508260e00151612d20565b8060e001518160c001516118d89190614237565b4210611919576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611910906142b7565b60405180910390fd5b6000821261195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195390614323565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016119bb9190614352565b602060405180830381865afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc9190614382565b1015611a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a34906143fb565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611a9f9392919061442a565b6020604051808303816000875af1158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae29190614499565b5082600160060160008781526020019081526020016000206007018581548110611b0f57611b0e6144c6565b5b90600052602060002090600302016002016000828254611b2f9190614237565b925050819055506000600167ffffffffffffffff811115611b5357611b526131a5565b5b604051908082528060200260200182016040528015611b815781602001602082028036833780820191505090505b5090508481600081518110611b9957611b986144c6565b5b6020026020010181815250506000600167ffffffffffffffff811115611bc257611bc16131a5565b5b604051908082528060200260200182016040528015611bf05781602001602082028036833780820191505090505b5090508481600081518110611c0857611c076144c6565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611cef929190612ddd565b506040820151816002019080519060200190611d0c929190612ddd565b50505060006121ee896001600801805480602002602001604051908101604052809291908181526020016000905b828210156121e5578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611dce9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa9061415a565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b50505050508152602001600382018054611e609061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8c9061415a565b8015611ed95780601f10611eae57610100808354040283529160200191611ed9565b820191906000526020600020905b815481529060010190602001808311611ebc57829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611f0757611f06613beb565b5b6002811115611f1957611f18613beb565b5b81526020016004820160019054906101000a900460ff166002811115611f4257611f41613beb565b5b6002811115611f5457611f53613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612069578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611fce9061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ffa9061415a565b80156120475780601f1061201c57610100808354040283529160200191612047565b820191906000526020600020905b81548152906001019060200180831161202a57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611f91565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156121ce57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561215e57602002820191906000526020600020905b81548152602001906001019080831161214a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156121b657602002820191906000526020600020905b8154815260200190600101908083116121a2575b50505050508152505081526020019060010190612096565b505050508152505081526020019060010190611d3a565b5050505061125c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103612252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224990614589565b60405180910390fd5b60016008018181548110612269576122686144c6565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006122b79190612e2a565b6003820160006122c79190612e2a565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff02191690556005820160009055600682016000905560078201600061230f9190612e6a565b60088201600061231f9190612e8e565b5050600160060160008a81526020019081526020016000206001600801828154811061234e5761234d6144c6565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816123e1919061476b565b50600382018160030190816123f6919061476b565b506004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600281111561242f5761242e613beb565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561246c5761246b613beb565b5b02179055506005820154816005015560068201548160060155600782018160070190805461249b929190612eb2565b5060088201816008019080546124b2929190612f33565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d815260200190815260200160002060070160405161250193929190614cb5565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848633600160060160008f8152602001908152602001600020600701604051612558959493929190614be1565b60405180910390a150505050505061256e612d16565b505050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156126e757838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561267757602002820191906000526020600020905b815481526020019060010190808311612663575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156126cf57602002820191906000526020600020905b8154815260200190600101908083116126bb575b505050505081525050815260200190600101906125af565b50505050905060005b815181101561276e57600082828151811061270e5761270d6144c6565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361275a57819350505050612794565b508080612766906144f5565b9150506126f0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b60606001600801805480602002602001604051908101604052809291908181526020016000905b82821015612c6c578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546128559061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546128819061415a565b80156128ce5780601f106128a3576101008083540402835291602001916128ce565b820191906000526020600020905b8154815290600101906020018083116128b157829003601f168201915b505050505081526020016003820180546128e79061415a565b80601f01602080910402602001604051908101604052809291908181526020018280546129139061415a565b80156129605780601f1061293557610100808354040283529160200191612960565b820191906000526020600020905b81548152906001019060200180831161294357829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561298e5761298d613beb565b5b60028111156129a05761299f613beb565b5b81526020016004820160019054906101000a900460ff1660028111156129c9576129c8613beb565b5b60028111156129db576129da613beb565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612af0578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054612a559061415a565b80601f0160208091040260200160405190810160405280929190818152602001828054612a819061415a565b8015612ace5780601f10612aa357610100808354040283529160200191612ace565b820191906000526020600020905b815481529060010190602001808311612ab157829003601f168201915b5050505050815260200160028201548152505081526020019060010190612a18565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612c5557838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015612be557602002820191906000526020600020905b815481526020019060010190808311612bd1575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612c3d57602002820191906000526020600020905b815481526020019060010190808311612c29575b50505050508152505081526020019060010190612b1d565b5050505081525050815260200190600101906127c1565b50505050905090565b600260005403612cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb190614d46565b60405180910390fd5b6002600081905550565b600080600090505b8251811015612d1057828181518110612ce857612ce76144c6565b5b602002602001015182612cfb9190614237565b91508080612d08906144f5565b915050612ccc565b50919050565b6001600081905550565b612db88282604051602401612d36929190614d9f565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612dbc565b5050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b828054828255906000526020600020908101928215612e19579160200282015b82811115612e18578251825591602001919060010190612dfd565b5b509050612e269190613020565b5090565b508054612e369061415a565b6000825580601f10612e485750612e67565b601f016020900490600052602060002090810190612e669190613020565b5b50565b5080546000825560030290600052602060002090810190612e8b919061303d565b50565b5080546000825560030290600052602060002090810190612eaf9190613074565b50565b828054828255906000526020600020906003028101928215612f225760005260206000209160030282015b82811115612f215782826000820154816000015560018201816001019081612f05919061476b565b5060028201548160020155505091600301919060030190612edd565b5b509050612f2f919061303d565b5090565b82805482825590600052602060002090600302810192821561300f5760005260206000209160030282015b8281111561300e5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820181600101908054612fe59291906130d2565b506002820181600201908054612ffc9291906130d2565b50505091600301919060030190612f5e565b5b50905061301c9190613074565b5090565b5b80821115613039576000816000905550600101613021565b5090565b5b808211156130705760008082016000905560018201600061305f9190612e2a565b60028201600090555060030161303e565b5090565b5b808211156130ce57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006130b59190613124565b6002820160006130c59190613124565b50600301613075565b5090565b8280548282559060005260206000209081019282156131135760005260206000209182015b828111156131125782548255916001019190600101906130f7565b5b5090506131209190613020565b5090565b50805460008255906000526020600020908101906131429190613020565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61316c81613159565b811461317757600080fd5b50565b60008135905061318981613163565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131dd82613194565b810181811067ffffffffffffffff821117156131fc576131fb6131a5565b5b80604052505050565b600061320f613145565b905061321b82826131d4565b919050565b600067ffffffffffffffff82111561323b5761323a6131a5565b5b602082029050602081019050919050565b600080fd5b600061326461325f84613220565b613205565b905080838252602082019050602084028301858111156132875761328661324c565b5b835b818110156132b0578061329c888261317a565b845260208401935050602081019050613289565b5050509392505050565b600082601f8301126132cf576132ce61318f565b5b81356132df848260208601613251565b91505092915050565b6000806000606084860312156133015761330061314f565b5b600061330f8682870161317a565b935050602084013567ffffffffffffffff8111156133305761332f613154565b5b61333c868287016132ba565b925050604084013567ffffffffffffffff81111561335d5761335c613154565b5b613369868287016132ba565b9150509250925092565b600067ffffffffffffffff82111561338e5761338d6131a5565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133d4826133a9565b9050919050565b6133e4816133c9565b81146133ef57600080fd5b50565b600081359050613401816133db565b92915050565b600080fd5b600067ffffffffffffffff821115613427576134266131a5565b5b61343082613194565b9050602081019050919050565b82818337600083830152505050565b600061345f61345a8461340c565b613205565b90508281526020810184848401111561347b5761347a613407565b5b61348684828561343d565b509392505050565b600082601f8301126134a3576134a261318f565b5b81356134b384826020860161344c565b91505092915050565b600381106134c957600080fd5b50565b6000813590506134db816134bc565b92915050565b600381106134ee57600080fd5b50565b600081359050613500816134e1565b92915050565b600067ffffffffffffffff821115613521576135206131a5565b5b602082029050602081019050919050565b6000606082840312156135485761354761339f565b5b6135526060613205565b905060006135628482850161317a565b600083015250602082013567ffffffffffffffff811115613586576135856133a4565b5b6135928482850161348e565b60208301525060406135a68482850161317a565b60408301525092915050565b60006135c56135c084613506565b613205565b905080838252602082019050602084028301858111156135e8576135e761324c565b5b835b8181101561362f57803567ffffffffffffffff81111561360d5761360c61318f565b5b80860161361a8982613532565b855260208501945050506020810190506135ea565b5050509392505050565b600082601f83011261364e5761364d61318f565b5b813561365e8482602086016135b2565b91505092915050565b600067ffffffffffffffff821115613682576136816131a5565b5b602082029050602081019050919050565b6000606082840312156136a9576136a861339f565b5b6136b36060613205565b905060006136c3848285016133f2565b600083015250602082013567ffffffffffffffff8111156136e7576136e66133a4565b5b6136f3848285016132ba565b602083015250604082013567ffffffffffffffff811115613717576137166133a4565b5b613723848285016132ba565b60408301525092915050565b600061374261373d84613667565b613205565b905080838252602082019050602084028301858111156137655761376461324c565b5b835b818110156137ac57803567ffffffffffffffff81111561378a5761378961318f565b5b8086016137978982613693565b85526020850194505050602081019050613767565b5050509392505050565b600082601f8301126137cb576137ca61318f565b5b81356137db84826020860161372f565b91505092915050565b600061014082840312156137fb576137fa61339f565b5b613806610140613205565b905060006138168482850161317a565b600083015250602061382a848285016133f2565b602083015250604082013567ffffffffffffffff81111561384e5761384d6133a4565b5b61385a8482850161348e565b604083015250606082013567ffffffffffffffff81111561387e5761387d6133a4565b5b61388a8482850161348e565b606083015250608061389e848285016134cc565b60808301525060a06138b2848285016134f1565b60a08301525060c06138c68482850161317a565b60c08301525060e06138da8482850161317a565b60e08301525061010082013567ffffffffffffffff8111156138ff576138fe6133a4565b5b61390b84828501613639565b6101008301525061012082013567ffffffffffffffff811115613931576139306133a4565b5b61393d848285016137b6565b6101208301525092915050565b600061395d61395884613373565b613205565b905080838252602082019050602084028301858111156139805761397f61324c565b5b835b818110156139c757803567ffffffffffffffff8111156139a5576139a461318f565b5b8086016139b289826137e4565b85526020850194505050602081019050613982565b5050509392505050565b600082601f8301126139e6576139e561318f565b5b81356139f684826020860161394a565b91505092915050565b60008060408385031215613a1657613a1561314f565b5b6000613a248582860161317a565b925050602083013567ffffffffffffffff811115613a4557613a44613154565b5b613a51858286016139d1565b9150509250929050565b6000819050919050565b613a6e81613a5b565b82525050565b6000602082019050613a896000830184613a65565b92915050565b600080600060608486031215613aa857613aa761314f565b5b6000613ab68682870161317a565b9350506020613ac78682870161317a565b9250506040613ad88682870161317a565b9150509250925092565b60008060408385031215613af957613af861314f565b5b6000613b078582860161317a565b9250506020613b18858286016133f2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b5781613159565b82525050565b613b66816133c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ba6578082015181840152602081019050613b8b565b60008484015250505050565b6000613bbd82613b6c565b613bc78185613b77565b9350613bd7818560208601613b88565b613be081613194565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613c2b57613c2a613beb565b5b50565b6000819050613c3c82613c1a565b919050565b6000613c4c82613c2e565b9050919050565b613c5c81613c41565b82525050565b60038110613c7357613c72613beb565b5b50565b6000819050613c8482613c62565b919050565b6000613c9482613c76565b9050919050565b613ca481613c89565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000606083016000830151613cee6000860182613b4e565b5060208301518482036020860152613d068282613bb2565b9150506040830151613d1b6040860182613b4e565b508091505092915050565b6000613d328383613cd6565b905092915050565b6000602082019050919050565b6000613d5282613caa565b613d5c8185613cb5565b935083602082028501613d6e85613cc6565b8060005b85811015613daa5784840389528151613d8b8582613d26565b9450613d9683613d3a565b925060208a01995050600181019050613d72565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613e208383613b4e565b60208301905092915050565b6000602082019050919050565b6000613e4482613de8565b613e4e8185613df3565b9350613e5983613e04565b8060005b83811015613e8a578151613e718882613e14565b9750613e7c83613e2c565b925050600181019050613e5d565b5085935050505092915050565b6000606083016000830151613eaf6000860182613b5d565b5060208301518482036020860152613ec78282613e39565b91505060408301518482036040860152613ee18282613e39565b9150508091505092915050565b6000613efa8383613e97565b905092915050565b6000602082019050919050565b6000613f1a82613dbc565b613f248185613dc7565b935083602082028501613f3685613dd8565b8060005b85811015613f725784840389528151613f538582613eee565b9450613f5e83613f02565b925060208a01995050600181019050613f3a565b50829750879550505050505092915050565b600061014083016000830151613f9d6000860182613b4e565b506020830151613fb06020860182613b5d565b5060408301518482036040860152613fc88282613bb2565b91505060608301518482036060860152613fe28282613bb2565b9150506080830151613ff76080860182613c53565b5060a083015161400a60a0860182613c9b565b5060c083015161401d60c0860182613b4e565b5060e083015161403060e0860182613b4e565b5061010083015184820361010086015261404a8282613d47565b9150506101208301518482036101208601526140668282613f0f565b9150508091505092915050565b600061407f8383613f84565b905092915050565b6000602082019050919050565b600061409f82613b22565b6140a98185613b2d565b9350836020820285016140bb85613b3e565b8060005b858110156140f757848403895281516140d88582614073565b94506140e383614087565b925060208a019950506001810190506140bf565b50829750879550505050505092915050565b600060208201905081810360008301526141238184614094565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061417257607f821691505b6020821081036141855761418461412b565b5b50919050565b600082825260208201905092915050565b7f776569676874656420766f74696e67206e6f7420616c6c6f7765640000000000600082015250565b60006141d2601b8361418b565b91506141dd8261419c565b602082019050919050565b60006020820190508181036000830152614201816141c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061424282613159565b915061424d83613159565b925082820190508082111561426557614264614208565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b60006142a1600f8361418b565b91506142ac8261426b565b602082019050919050565b600060208201905081810360008301526142d081614294565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b600061430d600d8361418b565b9150614318826142d7565b602082019050919050565b6000602082019050818103600083015261433c81614300565b9050919050565b61434c816133c9565b82525050565b60006020820190506143676000830184614343565b92915050565b60008151905061437c81613163565b92915050565b6000602082840312156143985761439761314f565b5b60006143a68482850161436d565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b60006143e5600f8361418b565b91506143f0826143af565b602082019050919050565b60006020820190508181036000830152614414816143d8565b9050919050565b61442481613159565b82525050565b600060608201905061443f6000830186614343565b61444c6020830185614343565b614459604083018461441b565b949350505050565b60008115159050919050565b61447681614461565b811461448157600080fd5b50565b6000815190506144938161446d565b92915050565b6000602082840312156144af576144ae61314f565b5b60006144bd84828501614484565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061450082613159565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361453257614531614208565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b600061457360188361418b565b915061457e8261453d565b602082019050919050565b600060208201905081810360008301526145a281614566565b9050919050565b6000815490506145b88161415a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026146217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826145e4565b61462b86836145e4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061466861466361465e84613159565b614643565b613159565b9050919050565b6000819050919050565b6146828361464d565b61469661468e8261466f565b8484546145f1565b825550505050565b600090565b6146ab61469e565b6146b6818484614679565b505050565b5b818110156146da576146cf6000826146a3565b6001810190506146bc565b5050565b601f82111561471f576146f0816145bf565b6146f9846145d4565b81016020851015614708578190505b61471c614714856145d4565b8301826146bb565b50505b505050565b600082821c905092915050565b600061474260001984600802614724565b1980831691505092915050565b600061475b8383614731565b9150826002028217905092915050565b818103614779575050614851565b614782826145a9565b67ffffffffffffffff81111561479b5761479a6131a5565b5b6147a5825461415a565b6147b08282856146de565b6000601f8311600181146147df57600084156147cd578287015490505b6147d7858261474f565b86555061484a565b601f1984166147ed876145bf565b96506147f8866145bf565b60005b82811015614820578489015482556001820191506001850194506020810190506147fb565b8683101561483d5784890154614839601f891682614731565b8355505b6001600288020188555050505b5050505050505b565b600060608301600083015161486b6000860182613b5d565b50602083015184820360208601526148838282613e39565b9150506040830151848203604086015261489d8282613e39565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000614905614900836148db565b6148e8565b9050919050565b600081546149198161415a565b6149238186613b77565b9450600182166000811461493e576001811461495457614987565b60ff198316865281151560200286019350614987565b61495d856145bf565b60005b8381101561497f57815481890152600182019150602081019050614960565b808801955050505b50505092915050565b60006060830160008084015490506149a7816148f2565b6149b46000870182613b4e565b506001840185830360208701526149cb838261490c565b925050600284015490506149de816148f2565b6149eb6040870182613b4e565b50819250505092915050565b6000614a038383614990565b905092915050565b6000600382019050919050565b6000614a23826148aa565b614a2d81856148b5565b935083602082028501614a3f856148c6565b8060005b85811015614a7a57848403895281614a5b85826149f7565b9450614a6683614a0b565b925060208a01995050600181019050614a43565b50829750879550505050505092915050565b6000606082019050614aa1600083018661441b565b8181036020830152614ab38185614853565b90508181036040830152614ac78184614a18565b9050949350505050565b600082825260208201905092915050565b6000614aed82613de8565b614af78185614ad1565b9350614b0283613e04565b8060005b83811015614b33578151614b1a8882613e14565b9750614b2583613e2c565b925050600181019050614b06565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b6000614b7882614b40565b614b8281856148b5565b935083602082028501614b9485614b4b565b8060005b85811015614bcf57848403895281614bb085826149f7565b9450614bbb83614b60565b925060208a01995050600181019050614b98565b50829750879550505050505092915050565b600060a082019050614bf6600083018861441b565b8181036020830152614c088187614ae2565b90508181036040830152614c1c8186614ae2565b9050614c2b6060830185614343565b8181036080830152614c3d8184614b6d565b90509695505050505050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f776564600082015250565b6000614c7f60208361418b565b9150614c8a82614c49565b602082019050919050565b60006020820190508181036000830152614cae81614c72565b9050919050565b6000606082019050614cca600083018661441b565b8181036020830152614cdc8185614853565b90508181036040830152614cf08184614b6d565b9050949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614d30601f8361418b565b9150614d3b82614cfa565b602082019050919050565b60006020820190508181036000830152614d5f81614d23565b9050919050565b6000614d7182613b6c565b614d7b818561418b565b9350614d8b818560208601613b88565b614d9481613194565b840191505092915050565b60006040820190508181036000830152614db98185614d66565b9050614dc8602083018461441b565b939250505056fea26469706673582212209f415d03c588f762eb2b8021c93f8f841834c6a9af1112c5f4e246648858109e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 234,
        "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
        "label": "s",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AppStorage)940_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)866_storage)dyn_storage": {
        "base": "t_struct(Option)866_storage",
        "encoding": "dynamic_array",
        "label": "struct Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)902_storage)dyn_storage": {
        "base": "t_struct(Proposal)902_storage",
        "encoding": "dynamic_array",
        "label": "struct Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)875_storage)dyn_storage": {
        "base": "t_struct(Voter)875_storage",
        "encoding": "dynamic_array",
        "label": "struct Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)142": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)859": {
        "encoding": "inplace",
        "label": "enum ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)855": {
        "encoding": "inplace",
        "label": "enum ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)148_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)148_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)902_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)902_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)940_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 904,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 908,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 914,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "allowances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 919,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "nonces",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Counter)148_storage)"
          },
          {
            "astId": 922,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "larToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)142"
          },
          {
            "astId": 924,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 929,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Proposal)902_storage)"
          },
          {
            "astId": 932,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalsList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 936,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalsArray",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Proposal)902_storage)dyn_storage"
          },
          {
            "astId": 939,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalsId",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Counter)148_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 147,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Option)866_storage": {
        "encoding": "inplace",
        "label": "struct Option",
        "members": [
          {
            "astId": 861,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 863,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 865,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)902_storage": {
        "encoding": "inplace",
        "label": "struct Proposal",
        "members": [
          {
            "astId": 877,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 881,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 883,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 886,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)855"
          },
          {
            "astId": 889,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)859"
          },
          {
            "astId": 891,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)866_storage)dyn_storage"
          },
          {
            "astId": 901,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)875_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)875_storage": {
        "encoding": "inplace",
        "label": "struct Voter",
        "members": [
          {
            "astId": 868,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 871,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 874,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}