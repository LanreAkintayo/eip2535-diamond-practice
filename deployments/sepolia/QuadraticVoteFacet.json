{
  "address": "0xe9e5627C3E6e92Ae13Ce91421FFb40bc18d21e91",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Voter",
          "name": "voter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionVotes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "proposalOptions",
          "type": "tuple[]"
        }
      ],
      "name": "VoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "checkVotingStatus",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum ProposalStatus",
              "name": "proposalStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "optionText",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "vote",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Option[]",
              "name": "options",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "voterAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionIndexes",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionVotes",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Voter[]",
              "name": "voters",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Proposal[]",
          "name": "proposalsArray",
          "type": "tuple[]"
        }
      ],
      "name": "getProposalIndex",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByQuadratic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6633eab67d38d430c38ab3a568bf6ac8d11c960f428cd63ac54b4abb90474c6",
  "receipt": {
    "to": null,
    "from": "0xec2B1547294a4dd62C0aE651aEb01493f8e4cD74",
    "contractAddress": "0xe9e5627C3E6e92Ae13Ce91421FFb40bc18d21e91",
    "transactionIndex": 7,
    "gasUsed": "2804855",
    "logsBloom": "0x
    "blockHash": "0xb197554b18b53462af04d6be60d2dbb633daaa1f4e249ed7c841f2a65d78c7c5",
    "transactionHash": "0xa6633eab67d38d430c38ab3a568bf6ac8d11c960f428cd63ac54b4abb90474c6",
    "logs": [],
    "blockNumber": 5780779,
    "cumulativeGasUsed": "5326285",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1486e01ec861b432f083d9365e90fed5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Voter\",\"name\":\"voter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"proposalOptions\",\"type\":\"tuple[]\"}],\"name\":\"VoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"checkVotingStatus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Proposal[]\",\"name\":\"proposalsArray\",\"type\":\"tuple[]\"}],\"name\":\"getProposalIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByQuadratic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/QuadraticVoteFacet.sol\":\"QuadraticVoteFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0xae05cf87494ddb159206d4e9d277720a7723b23320721d506e68837d6e0658e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/facets/QuadraticVoteFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport {AppStorage, ProposalType, ProposalStatus, Option, Voter, Proposal} from \\\"../libraries/LibAppStorage.sol\\\";\\r\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\r\\n\\r\\ncontract QuadraticVoteFacet is ReentrancyGuard {\\r\\n    AppStorage internal s;\\r\\n\\r\\n    event VoteCreated(\\r\\n        uint id,\\r\\n        uint[] optionVotes,\\r\\n        uint[] optionIndexes,\\r\\n        address voterAddress,\\r\\n        Option[] proposalOptions\\r\\n    );\\r\\n\\r\\n    event Vote(uint256 id, Voter voter, Option[] options);\\r\\n\\r\\n    function voteProposalByQuadratic(\\r\\n            uint256 id,\\r\\n            uint256[] memory indexes,\\r\\n            uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = s.proposals[id];\\r\\n\\r\\n        require(\\r\\n            proposal.proposalType == ProposalType.Quadratic,\\r\\n            \\\"quadratic voting not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"Voted already\\\");\\r\\n        require(\\r\\n            s.larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient VP\\\"\\r\\n        );\\r\\n        s.larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            console.log(LibAppStorage.sqrt(currentOptionVotingPower) * (10 ** 9));\\r\\n            s.proposals[id].options[currentOptionIndex].vote +=\\r\\n                LibAppStorage.sqrt(currentOptionVotingPower) *\\r\\n                (10 ** 9);\\r\\n        }\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](votingPower.length);\\r\\n        for (uint i = 0; i < votingPower.length; i++) {\\r\\n            optionVotes[i] = LibAppStorage.sqrt(votingPower[i]) * (10 ** 9);\\r\\n        }\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        s.proposals[id].voters.push(voter);\\r\\n\\r\\n        // Update proposalsArray\\r\\n        int index = getProposalIndex(id, s.proposalsArray);\\r\\n        require(index != -1, \\\"Proposal cannot be found\\\");\\r\\n\\r\\n        delete s.proposalsArray[uint(index)];\\r\\n\\r\\n        s.proposalsArray[uint(index)] = s.proposals[id];\\r\\n\\r\\n        emit Vote(id, voter, s.proposals[id].options);\\r\\n        emit VoteCreated(\\r\\n            id,\\r\\n            optionVotes,\\r\\n            indexes,\\r\\n            msg.sender,\\r\\n            s.proposals[id].options\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTotalVotingPower(\\r\\n        uint256[] memory votingPower\\r\\n    ) internal pure returns (uint256 totalVotingPower) {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n     function getProposalIndex(\\r\\n        uint id,\\r\\n        Proposal[] memory proposalsArray\\r\\n    ) public pure returns (int256) {\\r\\n        for (uint i = 0; i < proposalsArray.length; i++) {\\r\\n            Proposal memory currentProposal = proposalsArray[i];\\r\\n            if (currentProposal.id == id) {\\r\\n                return int(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n\\r\\n    function checkVotingStatus(\\r\\n        uint256 id,\\r\\n        address voter\\r\\n    ) public view returns (int256) {\\r\\n        Voter[] memory voters = s.proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x7dc14046f13459e9acedaf33e58d928237ec01319a8834878deec42422538fcd\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n\\r\\n/*\\r\\n    export interface Proposal {\\r\\n        id: string;\\r\\n        creator: string;\\r\\n        description: string;\\r\\n        duration: number;\\r\\n        proposalStatus: string;\\r\\n        proposalType: string;\\r\\n        latestOptions: string[][] | undefined;\\r\\n        startDate: number;\\r\\n        endDate: number;\\r\\n        status: string;\\r\\n        timeLeft: number;\\r\\n        title: string;\\r\\n        optionsArray: {\\r\\n            optionIndex: string;\\r\\n            optionText: string;\\r\\n            optionVote: string;\\r\\n            optionPercentage: string;\\r\\n        }[];\\r\\n        validOptions: string[][];\\r\\n\\r\\n    }\\r\\n\\r\\n*/\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    \\r\\n  proposal1 = {\\r\\n      latestOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      optionsArray: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      validOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n\\r\\n\\r\\n  allProposals = [proposal1, proposal2, proposal3, e.t.c.]\\r\\n  \\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  Whenever someone votes, the proposalsArray has to be updated. The mapping to has to be updated\\r\\n    \\r\\n     */\\r\\n\\r\\n\\r\\n    \\r\\nstruct AppStorage {\\r\\n    uint256 totalSupply;\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(address => uint256)) allowances;\\r\\n    mapping(address => Counters.Counter) nonces;  \\r\\n\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    mapping(uint256 => Proposal) proposals;\\r\\n\\r\\n    uint256[] proposalsList;\\r\\n\\r\\n    Proposal[] proposalsArray;\\r\\n\\r\\n    uint256[] proposalsId;\\r\\n\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage {\\r\\n    // diamondStorage() returns the position of the App storage struct in the diamond contract\\r\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\r\\n        assembly {\\r\\n            ds.slot := 0\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x179cda448f2848044be22f29a693ce529977d96aa436670c209278f6be466026\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550613179806100286000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632d2a15441461004657806397ae153514610062578063da12935c14610092575b600080fd5b610060600480360381019061005b9190611ca9565b6100c2565b005b61007c600480360381019061007791906123c0565b611314565b6040516100899190612435565b60405180910390f35b6100ac60048036038101906100a79190612450565b611398565b6040516100b99190612435565b60405180910390f35b6100ca6115bf565b60006100d58261160e565b905060006100e38533611398565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610179906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546101a5906124bf565b80156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b5050505050815260200160038201805461020b906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610237906124bf565b80156102845780601f1061025957610100808354040283529160200191610284565b820191906000526020600020905b81548152906001019060200180831161026757829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156102b2576102b16124f0565b5b60028111156102c4576102c36124f0565b5b81526020016004820160019054906101000a900460ff1660028111156102ed576102ec6124f0565b5b60028111156102ff576102fe6124f0565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610414578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610379906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546103a5906124bf565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b505050505081526020016002820154815250508152602001906001019061033c565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561057957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561050957602002820191906000526020600020905b8154815260200190600101908083116104f5575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561056157602002820191906000526020600020905b81548152602001906001019080831161054d575b50505050508152505081526020019060010190610441565b50505050815250509050600280811115610596576105956124f0565b5b816080015160028111156105ad576105ac6124f0565b5b146105ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e49061257c565b60405180910390fd5b8060e001518160c0015161060191906125cb565b4210610642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106399061264b565b60405180910390fd5b60008212610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c906126b7565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106e491906126e6565b602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190612716565b1015610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9061278f565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016107c8939291906127be565b6020604051808303816000875af11580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b919061282d565b5060005b85518110156108f557600086828151811061082d5761082c61285a565b5b60200260200101519050600086838151811061084c5761084b61285a565b5b60200260200101519050610876633b9aca0061086783611660565b6108719190612889565b6116da565b633b9aca0061088482611660565b61088e9190612889565b600160060160008b815260200190815260200160002060070183815481106108b9576108b861285a565b5b906000526020600020906003020160020160008282546108d991906125cb565b92505081905550505080806108ed906128cb565b91505061080f565b506000845167ffffffffffffffff81111561091357610912611b66565b5b6040519080825280602002602001820160405280156109415781602001602082028036833780820191505090505b50905060005b85518110156109b457633b9aca0061097887838151811061096b5761096a61285a565b5b6020026020010151611660565b6109829190612889565b8282815181106109955761099461285a565b5b60200260200101818152505080806109ac906128cb565b915050610947565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610a9092919061179e565b506040820151816002019080519060200190610aad92919061179e565b5050506000610f8f896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610f86578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610b6f906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9b906124bf565b8015610be85780601f10610bbd57610100808354040283529160200191610be8565b820191906000526020600020905b815481529060010190602001808311610bcb57829003601f168201915b50505050508152602001600382018054610c01906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2d906124bf565b8015610c7a5780601f10610c4f57610100808354040283529160200191610c7a565b820191906000526020600020905b815481529060010190602001808311610c5d57829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610ca857610ca76124f0565b5b6002811115610cba57610cb96124f0565b5b81526020016004820160019054906101000a900460ff166002811115610ce357610ce26124f0565b5b6002811115610cf557610cf46124f0565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610e0a578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610d6f906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9b906124bf565b8015610de85780601f10610dbd57610100808354040283529160200191610de8565b820191906000526020600020905b815481529060010190602001808311610dcb57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610d32565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f6f57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610eff57602002820191906000526020600020905b815481526020019060010190808311610eeb575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f5757602002820191906000526020600020905b815481526020019060010190808311610f43575b50505050508152505081526020019060010190610e37565b505050508152505081526020019060010190610adb565b50505050611314565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea9061295f565b60405180910390fd5b6001600801818154811061100a5761100961285a565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061105891906117eb565b60038201600061106891906117eb565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110b0919061182b565b6008820160006110c0919061184f565b5050600160060160008a8152602001908152602001600020600160080182815481106110ef576110ee61285a565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816111829190612b41565b50600382018160030190816111979190612b41565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360028111156111d0576111cf6124f0565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561120d5761120c6124f0565b5b02179055506005820154816005015560068201548160060155600782018160070190805461123c929190611873565b5060088201816008019080546112539291906118f4565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d81526020019081526020016000206007016040516112a293929190612f40565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848a33600160060160008f81526020019081526020016000206007016040516112f9959493929190612ff4565b60405180910390a150505050505061130f611773565b505050565b600080600090505b825181101561136d57600083828151811061133a5761133961285a565b5b6020026020010151905084816000015103611359578192505050611392565b508080611365906128cb565b91505061131c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561150c57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561149c57602002820191906000526020600020905b815481526020019060010190808311611488575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156114f457602002820191906000526020600020905b8154815260200190600101908083116114e0575b505050505081525050815260200190600101906113d4565b50505050905060005b81518110156115935760008282815181106115335761153261285a565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361157f578193505050506115b9565b50808061158b906128cb565b915050611515565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b600260005403611604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fb906130a8565b60405180910390fd5b6002600081905550565b600080600090505b825181101561165a578281815181106116325761163161285a565b5b60200260200101518261164591906125cb565b91508080611652906128cb565b915050611616565b50919050565b600060038211156116c7578190506000600160028461167f91906130f7565b61168991906125cb565b90505b818110156116c15780915060028182856116a691906130f7565b6116b091906125cb565b6116ba91906130f7565b905061168c565b506116d5565b600082146116d457600190505b5b919050565b611770816040516024016116ee9190613128565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061177d565b50565b6001600081905550565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b8280548282559060005260206000209081019282156117da579160200282015b828111156117d95782518255916020019190600101906117be565b5b5090506117e791906119e1565b5090565b5080546117f7906124bf565b6000825580601f106118095750611828565b601f01602090049060005260206000209081019061182791906119e1565b5b50565b508054600082556003029060005260206000209081019061184c91906119fe565b50565b50805460008255600302906000526020600020908101906118709190611a35565b50565b8280548282559060005260206000209060030281019282156118e35760005260206000209160030282015b828111156118e257828260008201548160000155600182018160010190816118c69190612b41565b506002820154816002015550509160030191906003019061189e565b5b5090506118f091906119fe565b5090565b8280548282559060005260206000209060030281019282156119d05760005260206000209160030282015b828111156119cf5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201816001019080546119a6929190611a93565b5060028201816002019080546119bd929190611a93565b5050509160030191906003019061191f565b5b5090506119dd9190611a35565b5090565b5b808211156119fa5760008160009055506001016119e2565b5090565b5b80821115611a3157600080820160009055600182016000611a2091906117eb565b6002820160009055506003016119ff565b5090565b5b80821115611a8f57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000611a769190611ae5565b600282016000611a869190611ae5565b50600301611a36565b5090565b828054828255906000526020600020908101928215611ad45760005260206000209182015b82811115611ad3578254825591600101919060010190611ab8565b5b509050611ae191906119e1565b5090565b5080546000825590600052602060002090810190611b0391906119e1565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b2d81611b1a565b8114611b3857600080fd5b50565b600081359050611b4a81611b24565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9e82611b55565b810181811067ffffffffffffffff82111715611bbd57611bbc611b66565b5b80604052505050565b6000611bd0611b06565b9050611bdc8282611b95565b919050565b600067ffffffffffffffff821115611bfc57611bfb611b66565b5b602082029050602081019050919050565b600080fd5b6000611c25611c2084611be1565b611bc6565b90508083825260208201905060208402830185811115611c4857611c47611c0d565b5b835b81811015611c715780611c5d8882611b3b565b845260208401935050602081019050611c4a565b5050509392505050565b600082601f830112611c9057611c8f611b50565b5b8135611ca0848260208601611c12565b91505092915050565b600080600060608486031215611cc257611cc1611b10565b5b6000611cd086828701611b3b565b935050602084013567ffffffffffffffff811115611cf157611cf0611b15565b5b611cfd86828701611c7b565b925050604084013567ffffffffffffffff811115611d1e57611d1d611b15565b5b611d2a86828701611c7b565b9150509250925092565b600067ffffffffffffffff821115611d4f57611d4e611b66565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d9582611d6a565b9050919050565b611da581611d8a565b8114611db057600080fd5b50565b600081359050611dc281611d9c565b92915050565b600080fd5b600067ffffffffffffffff821115611de857611de7611b66565b5b611df182611b55565b9050602081019050919050565b82818337600083830152505050565b6000611e20611e1b84611dcd565b611bc6565b905082815260208101848484011115611e3c57611e3b611dc8565b5b611e47848285611dfe565b509392505050565b600082601f830112611e6457611e63611b50565b5b8135611e74848260208601611e0d565b91505092915050565b60038110611e8a57600080fd5b50565b600081359050611e9c81611e7d565b92915050565b60038110611eaf57600080fd5b50565b600081359050611ec181611ea2565b92915050565b600067ffffffffffffffff821115611ee257611ee1611b66565b5b602082029050602081019050919050565b600060608284031215611f0957611f08611d60565b5b611f136060611bc6565b90506000611f2384828501611b3b565b600083015250602082013567ffffffffffffffff811115611f4757611f46611d65565b5b611f5384828501611e4f565b6020830152506040611f6784828501611b3b565b60408301525092915050565b6000611f86611f8184611ec7565b611bc6565b90508083825260208201905060208402830185811115611fa957611fa8611c0d565b5b835b81811015611ff057803567ffffffffffffffff811115611fce57611fcd611b50565b5b808601611fdb8982611ef3565b85526020850194505050602081019050611fab565b5050509392505050565b600082601f83011261200f5761200e611b50565b5b813561201f848260208601611f73565b91505092915050565b600067ffffffffffffffff82111561204357612042611b66565b5b602082029050602081019050919050565b60006060828403121561206a57612069611d60565b5b6120746060611bc6565b9050600061208484828501611db3565b600083015250602082013567ffffffffffffffff8111156120a8576120a7611d65565b5b6120b484828501611c7b565b602083015250604082013567ffffffffffffffff8111156120d8576120d7611d65565b5b6120e484828501611c7b565b60408301525092915050565b60006121036120fe84612028565b611bc6565b9050808382526020820190506020840283018581111561212657612125611c0d565b5b835b8181101561216d57803567ffffffffffffffff81111561214b5761214a611b50565b5b8086016121588982612054565b85526020850194505050602081019050612128565b5050509392505050565b600082601f83011261218c5761218b611b50565b5b813561219c8482602086016120f0565b91505092915050565b600061014082840312156121bc576121bb611d60565b5b6121c7610140611bc6565b905060006121d784828501611b3b565b60008301525060206121eb84828501611db3565b602083015250604082013567ffffffffffffffff81111561220f5761220e611d65565b5b61221b84828501611e4f565b604083015250606082013567ffffffffffffffff81111561223f5761223e611d65565b5b61224b84828501611e4f565b606083015250608061225f84828501611e8d565b60808301525060a061227384828501611eb2565b60a08301525060c061228784828501611b3b565b60c08301525060e061229b84828501611b3b565b60e08301525061010082013567ffffffffffffffff8111156122c0576122bf611d65565b5b6122cc84828501611ffa565b6101008301525061012082013567ffffffffffffffff8111156122f2576122f1611d65565b5b6122fe84828501612177565b6101208301525092915050565b600061231e61231984611d34565b611bc6565b9050808382526020820190506020840283018581111561234157612340611c0d565b5b835b8181101561238857803567ffffffffffffffff81111561236657612365611b50565b5b80860161237389826121a5565b85526020850194505050602081019050612343565b5050509392505050565b600082601f8301126123a7576123a6611b50565b5b81356123b784826020860161230b565b91505092915050565b600080604083850312156123d7576123d6611b10565b5b60006123e585828601611b3b565b925050602083013567ffffffffffffffff81111561240657612405611b15565b5b61241285828601612392565b9150509250929050565b6000819050919050565b61242f8161241c565b82525050565b600060208201905061244a6000830184612426565b92915050565b6000806040838503121561246757612466611b10565b5b600061247585828601611b3b565b925050602061248685828601611db3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124d757607f821691505b6020821081036124ea576124e9612490565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656400000000600082015250565b6000612566601c8361251f565b915061257182612530565b602082019050919050565b6000602082019050818103600083015261259581612559565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125d682611b1a565b91506125e183611b1a565b92508282019050808211156125f9576125f861259c565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b6000612635600f8361251f565b9150612640826125ff565b602082019050919050565b6000602082019050818103600083015261266481612628565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b60006126a1600d8361251f565b91506126ac8261266b565b602082019050919050565b600060208201905081810360008301526126d081612694565b9050919050565b6126e081611d8a565b82525050565b60006020820190506126fb60008301846126d7565b92915050565b60008151905061271081611b24565b92915050565b60006020828403121561272c5761272b611b10565b5b600061273a84828501612701565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b6000612779600f8361251f565b915061278482612743565b602082019050919050565b600060208201905081810360008301526127a88161276c565b9050919050565b6127b881611b1a565b82525050565b60006060820190506127d360008301866126d7565b6127e060208301856126d7565b6127ed60408301846127af565b949350505050565b60008115159050919050565b61280a816127f5565b811461281557600080fd5b50565b60008151905061282781612801565b92915050565b60006020828403121561284357612842611b10565b5b600061285184828501612818565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061289482611b1a565b915061289f83611b1a565b92508282026128ad81611b1a565b915082820484148315176128c4576128c361259c565b5b5092915050565b60006128d682611b1a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129085761290761259c565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b600061294960188361251f565b915061295482612913565b602082019050919050565b600060208201905081810360008301526129788161293c565b9050919050565b60008154905061298e816124bf565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129f77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826129ba565b612a0186836129ba565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a3e612a39612a3484611b1a565b612a19565b611b1a565b9050919050565b6000819050919050565b612a5883612a23565b612a6c612a6482612a45565b8484546129c7565b825550505050565b600090565b612a81612a74565b612a8c818484612a4f565b505050565b5b81811015612ab057612aa5600082612a79565b600181019050612a92565b5050565b601f821115612af557612ac681612995565b612acf846129aa565b81016020851015612ade578190505b612af2612aea856129aa565b830182612a91565b50505b505050565b600082821c905092915050565b6000612b1860001984600802612afa565b1980831691505092915050565b6000612b318383612b07565b9150826002028217905092915050565b818103612b4f575050612c27565b612b588261297f565b67ffffffffffffffff811115612b7157612b70611b66565b5b612b7b82546124bf565b612b86828285612ab4565b6000601f831160018114612bb55760008415612ba3578287015490505b612bad8582612b25565b865550612c20565b601f198416612bc387612995565b9650612bce86612995565b60005b82811015612bf657848901548255600182019150600185019450602081019050612bd1565b86831015612c135784890154612c0f601f891682612b07565b8355505b6001600288020188555050505b5050505050505b565b612c3281611d8a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c6d81611b1a565b82525050565b6000612c7f8383612c64565b60208301905092915050565b6000602082019050919050565b6000612ca382612c38565b612cad8185612c43565b9350612cb883612c54565b8060005b83811015612ce9578151612cd08882612c73565b9750612cdb83612c8b565b925050600181019050612cbc565b5085935050505092915050565b6000606083016000830151612d0e6000860182612c29565b5060208301518482036020860152612d268282612c98565b91505060408301518482036040860152612d408282612c98565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000612da8612da383612d7e565b612d8b565b9050919050565b600082825260208201905092915050565b60008154612dcd816124bf565b612dd78186612daf565b94506001821660008114612df25760018114612e0857612e3b565b60ff198316865281151560200286019350612e3b565b612e1185612995565b60005b83811015612e3357815481890152600182019150602081019050612e14565b808801955050505b50505092915050565b6000606083016000808401549050612e5b81612d95565b612e686000870182612c64565b50600184018583036020870152612e7f8382612dc0565b92505060028401549050612e9281612d95565b612e9f6040870182612c64565b50819250505092915050565b6000612eb78383612e44565b905092915050565b6000600382019050919050565b6000612ed782612d4d565b612ee18185612d58565b935083602082028501612ef385612d69565b8060005b85811015612f2e57848403895281612f0f8582612eab565b9450612f1a83612ebf565b925060208a01995050600181019050612ef7565b50829750879550505050505092915050565b6000606082019050612f5560008301866127af565b8181036020830152612f678185612cf6565b90508181036040830152612f7b8184612ecc565b9050949350505050565b600082825260208201905092915050565b6000612fa182612c38565b612fab8185612f85565b9350612fb683612c54565b8060005b83811015612fe7578151612fce8882612c73565b9750612fd983612c8b565b925050600181019050612fba565b5085935050505092915050565b600060a08201905061300960008301886127af565b818103602083015261301b8187612f96565b9050818103604083015261302f8186612f96565b905061303e60608301856126d7565b81810360808301526130508184612ecc565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613092601f8361251f565b915061309d8261305c565b602082019050919050565b600060208201905081810360008301526130c181613085565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061310282611b1a565b915061310d83611b1a565b92508261311d5761311c6130c8565b5b828204905092915050565b600060208201905061313d60008301846127af565b9291505056fea26469706673582212208438769da3b5f93fe636de6c47df381c211dcf3173438da70c2e3772f123578564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632d2a15441461004657806397ae153514610062578063da12935c14610092575b600080fd5b610060600480360381019061005b9190611ca9565b6100c2565b005b61007c600480360381019061007791906123c0565b611314565b6040516100899190612435565b60405180910390f35b6100ac60048036038101906100a79190612450565b611398565b6040516100b99190612435565b60405180910390f35b6100ca6115bf565b60006100d58261160e565b905060006100e38533611398565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610179906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546101a5906124bf565b80156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b5050505050815260200160038201805461020b906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610237906124bf565b80156102845780601f1061025957610100808354040283529160200191610284565b820191906000526020600020905b81548152906001019060200180831161026757829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156102b2576102b16124f0565b5b60028111156102c4576102c36124f0565b5b81526020016004820160019054906101000a900460ff1660028111156102ed576102ec6124f0565b5b60028111156102ff576102fe6124f0565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610414578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610379906124bf565b80601f01602080910402602001604051908101604052809291908181526020018280546103a5906124bf565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b505050505081526020016002820154815250508152602001906001019061033c565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561057957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561050957602002820191906000526020600020905b8154815260200190600101908083116104f5575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561056157602002820191906000526020600020905b81548152602001906001019080831161054d575b50505050508152505081526020019060010190610441565b50505050815250509050600280811115610596576105956124f0565b5b816080015160028111156105ad576105ac6124f0565b5b146105ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e49061257c565b60405180910390fd5b8060e001518160c0015161060191906125cb565b4210610642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106399061264b565b60405180910390fd5b60008212610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c906126b7565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106e491906126e6565b602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190612716565b1015610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9061278f565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016107c8939291906127be565b6020604051808303816000875af11580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b919061282d565b5060005b85518110156108f557600086828151811061082d5761082c61285a565b5b60200260200101519050600086838151811061084c5761084b61285a565b5b60200260200101519050610876633b9aca0061086783611660565b6108719190612889565b6116da565b633b9aca0061088482611660565b61088e9190612889565b600160060160008b815260200190815260200160002060070183815481106108b9576108b861285a565b5b906000526020600020906003020160020160008282546108d991906125cb565b92505081905550505080806108ed906128cb565b91505061080f565b506000845167ffffffffffffffff81111561091357610912611b66565b5b6040519080825280602002602001820160405280156109415781602001602082028036833780820191505090505b50905060005b85518110156109b457633b9aca0061097887838151811061096b5761096a61285a565b5b6020026020010151611660565b6109829190612889565b8282815181106109955761099461285a565b5b60200260200101818152505080806109ac906128cb565b915050610947565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610a9092919061179e565b506040820151816002019080519060200190610aad92919061179e565b5050506000610f8f896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610f86578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610b6f906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9b906124bf565b8015610be85780601f10610bbd57610100808354040283529160200191610be8565b820191906000526020600020905b815481529060010190602001808311610bcb57829003601f168201915b50505050508152602001600382018054610c01906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2d906124bf565b8015610c7a5780601f10610c4f57610100808354040283529160200191610c7a565b820191906000526020600020905b815481529060010190602001808311610c5d57829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610ca857610ca76124f0565b5b6002811115610cba57610cb96124f0565b5b81526020016004820160019054906101000a900460ff166002811115610ce357610ce26124f0565b5b6002811115610cf557610cf46124f0565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610e0a578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610d6f906124bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9b906124bf565b8015610de85780601f10610dbd57610100808354040283529160200191610de8565b820191906000526020600020905b815481529060010190602001808311610dcb57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610d32565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f6f57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610eff57602002820191906000526020600020905b815481526020019060010190808311610eeb575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f5757602002820191906000526020600020905b815481526020019060010190808311610f43575b50505050508152505081526020019060010190610e37565b505050508152505081526020019060010190610adb565b50505050611314565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea9061295f565b60405180910390fd5b6001600801818154811061100a5761100961285a565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061105891906117eb565b60038201600061106891906117eb565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110b0919061182b565b6008820160006110c0919061184f565b5050600160060160008a8152602001908152602001600020600160080182815481106110ef576110ee61285a565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816111829190612b41565b50600382018160030190816111979190612b41565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360028111156111d0576111cf6124f0565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561120d5761120c6124f0565b5b02179055506005820154816005015560068201548160060155600782018160070190805461123c929190611873565b5060088201816008019080546112539291906118f4565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d81526020019081526020016000206007016040516112a293929190612f40565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848a33600160060160008f81526020019081526020016000206007016040516112f9959493929190612ff4565b60405180910390a150505050505061130f611773565b505050565b600080600090505b825181101561136d57600083828151811061133a5761133961285a565b5b6020026020010151905084816000015103611359578192505050611392565b508080611365906128cb565b91505061131c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561150c57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561149c57602002820191906000526020600020905b815481526020019060010190808311611488575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156114f457602002820191906000526020600020905b8154815260200190600101908083116114e0575b505050505081525050815260200190600101906113d4565b50505050905060005b81518110156115935760008282815181106115335761153261285a565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361157f578193505050506115b9565b50808061158b906128cb565b915050611515565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b600260005403611604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fb906130a8565b60405180910390fd5b6002600081905550565b600080600090505b825181101561165a578281815181106116325761163161285a565b5b60200260200101518261164591906125cb565b91508080611652906128cb565b915050611616565b50919050565b600060038211156116c7578190506000600160028461167f91906130f7565b61168991906125cb565b90505b818110156116c15780915060028182856116a691906130f7565b6116b091906125cb565b6116ba91906130f7565b905061168c565b506116d5565b600082146116d457600190505b5b919050565b611770816040516024016116ee9190613128565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061177d565b50565b6001600081905550565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b8280548282559060005260206000209081019282156117da579160200282015b828111156117d95782518255916020019190600101906117be565b5b5090506117e791906119e1565b5090565b5080546117f7906124bf565b6000825580601f106118095750611828565b601f01602090049060005260206000209081019061182791906119e1565b5b50565b508054600082556003029060005260206000209081019061184c91906119fe565b50565b50805460008255600302906000526020600020908101906118709190611a35565b50565b8280548282559060005260206000209060030281019282156118e35760005260206000209160030282015b828111156118e257828260008201548160000155600182018160010190816118c69190612b41565b506002820154816002015550509160030191906003019061189e565b5b5090506118f091906119fe565b5090565b8280548282559060005260206000209060030281019282156119d05760005260206000209160030282015b828111156119cf5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201816001019080546119a6929190611a93565b5060028201816002019080546119bd929190611a93565b5050509160030191906003019061191f565b5b5090506119dd9190611a35565b5090565b5b808211156119fa5760008160009055506001016119e2565b5090565b5b80821115611a3157600080820160009055600182016000611a2091906117eb565b6002820160009055506003016119ff565b5090565b5b80821115611a8f57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000611a769190611ae5565b600282016000611a869190611ae5565b50600301611a36565b5090565b828054828255906000526020600020908101928215611ad45760005260206000209182015b82811115611ad3578254825591600101919060010190611ab8565b5b509050611ae191906119e1565b5090565b5080546000825590600052602060002090810190611b0391906119e1565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b2d81611b1a565b8114611b3857600080fd5b50565b600081359050611b4a81611b24565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9e82611b55565b810181811067ffffffffffffffff82111715611bbd57611bbc611b66565b5b80604052505050565b6000611bd0611b06565b9050611bdc8282611b95565b919050565b600067ffffffffffffffff821115611bfc57611bfb611b66565b5b602082029050602081019050919050565b600080fd5b6000611c25611c2084611be1565b611bc6565b90508083825260208201905060208402830185811115611c4857611c47611c0d565b5b835b81811015611c715780611c5d8882611b3b565b845260208401935050602081019050611c4a565b5050509392505050565b600082601f830112611c9057611c8f611b50565b5b8135611ca0848260208601611c12565b91505092915050565b600080600060608486031215611cc257611cc1611b10565b5b6000611cd086828701611b3b565b935050602084013567ffffffffffffffff811115611cf157611cf0611b15565b5b611cfd86828701611c7b565b925050604084013567ffffffffffffffff811115611d1e57611d1d611b15565b5b611d2a86828701611c7b565b9150509250925092565b600067ffffffffffffffff821115611d4f57611d4e611b66565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d9582611d6a565b9050919050565b611da581611d8a565b8114611db057600080fd5b50565b600081359050611dc281611d9c565b92915050565b600080fd5b600067ffffffffffffffff821115611de857611de7611b66565b5b611df182611b55565b9050602081019050919050565b82818337600083830152505050565b6000611e20611e1b84611dcd565b611bc6565b905082815260208101848484011115611e3c57611e3b611dc8565b5b611e47848285611dfe565b509392505050565b600082601f830112611e6457611e63611b50565b5b8135611e74848260208601611e0d565b91505092915050565b60038110611e8a57600080fd5b50565b600081359050611e9c81611e7d565b92915050565b60038110611eaf57600080fd5b50565b600081359050611ec181611ea2565b92915050565b600067ffffffffffffffff821115611ee257611ee1611b66565b5b602082029050602081019050919050565b600060608284031215611f0957611f08611d60565b5b611f136060611bc6565b90506000611f2384828501611b3b565b600083015250602082013567ffffffffffffffff811115611f4757611f46611d65565b5b611f5384828501611e4f565b6020830152506040611f6784828501611b3b565b60408301525092915050565b6000611f86611f8184611ec7565b611bc6565b90508083825260208201905060208402830185811115611fa957611fa8611c0d565b5b835b81811015611ff057803567ffffffffffffffff811115611fce57611fcd611b50565b5b808601611fdb8982611ef3565b85526020850194505050602081019050611fab565b5050509392505050565b600082601f83011261200f5761200e611b50565b5b813561201f848260208601611f73565b91505092915050565b600067ffffffffffffffff82111561204357612042611b66565b5b602082029050602081019050919050565b60006060828403121561206a57612069611d60565b5b6120746060611bc6565b9050600061208484828501611db3565b600083015250602082013567ffffffffffffffff8111156120a8576120a7611d65565b5b6120b484828501611c7b565b602083015250604082013567ffffffffffffffff8111156120d8576120d7611d65565b5b6120e484828501611c7b565b60408301525092915050565b60006121036120fe84612028565b611bc6565b9050808382526020820190506020840283018581111561212657612125611c0d565b5b835b8181101561216d57803567ffffffffffffffff81111561214b5761214a611b50565b5b8086016121588982612054565b85526020850194505050602081019050612128565b5050509392505050565b600082601f83011261218c5761218b611b50565b5b813561219c8482602086016120f0565b91505092915050565b600061014082840312156121bc576121bb611d60565b5b6121c7610140611bc6565b905060006121d784828501611b3b565b60008301525060206121eb84828501611db3565b602083015250604082013567ffffffffffffffff81111561220f5761220e611d65565b5b61221b84828501611e4f565b604083015250606082013567ffffffffffffffff81111561223f5761223e611d65565b5b61224b84828501611e4f565b606083015250608061225f84828501611e8d565b60808301525060a061227384828501611eb2565b60a08301525060c061228784828501611b3b565b60c08301525060e061229b84828501611b3b565b60e08301525061010082013567ffffffffffffffff8111156122c0576122bf611d65565b5b6122cc84828501611ffa565b6101008301525061012082013567ffffffffffffffff8111156122f2576122f1611d65565b5b6122fe84828501612177565b6101208301525092915050565b600061231e61231984611d34565b611bc6565b9050808382526020820190506020840283018581111561234157612340611c0d565b5b835b8181101561238857803567ffffffffffffffff81111561236657612365611b50565b5b80860161237389826121a5565b85526020850194505050602081019050612343565b5050509392505050565b600082601f8301126123a7576123a6611b50565b5b81356123b784826020860161230b565b91505092915050565b600080604083850312156123d7576123d6611b10565b5b60006123e585828601611b3b565b925050602083013567ffffffffffffffff81111561240657612405611b15565b5b61241285828601612392565b9150509250929050565b6000819050919050565b61242f8161241c565b82525050565b600060208201905061244a6000830184612426565b92915050565b6000806040838503121561246757612466611b10565b5b600061247585828601611b3b565b925050602061248685828601611db3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124d757607f821691505b6020821081036124ea576124e9612490565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656400000000600082015250565b6000612566601c8361251f565b915061257182612530565b602082019050919050565b6000602082019050818103600083015261259581612559565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125d682611b1a565b91506125e183611b1a565b92508282019050808211156125f9576125f861259c565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b6000612635600f8361251f565b9150612640826125ff565b602082019050919050565b6000602082019050818103600083015261266481612628565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b60006126a1600d8361251f565b91506126ac8261266b565b602082019050919050565b600060208201905081810360008301526126d081612694565b9050919050565b6126e081611d8a565b82525050565b60006020820190506126fb60008301846126d7565b92915050565b60008151905061271081611b24565b92915050565b60006020828403121561272c5761272b611b10565b5b600061273a84828501612701565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b6000612779600f8361251f565b915061278482612743565b602082019050919050565b600060208201905081810360008301526127a88161276c565b9050919050565b6127b881611b1a565b82525050565b60006060820190506127d360008301866126d7565b6127e060208301856126d7565b6127ed60408301846127af565b949350505050565b60008115159050919050565b61280a816127f5565b811461281557600080fd5b50565b60008151905061282781612801565b92915050565b60006020828403121561284357612842611b10565b5b600061285184828501612818565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061289482611b1a565b915061289f83611b1a565b92508282026128ad81611b1a565b915082820484148315176128c4576128c361259c565b5b5092915050565b60006128d682611b1a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129085761290761259c565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b600061294960188361251f565b915061295482612913565b602082019050919050565b600060208201905081810360008301526129788161293c565b9050919050565b60008154905061298e816124bf565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129f77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826129ba565b612a0186836129ba565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a3e612a39612a3484611b1a565b612a19565b611b1a565b9050919050565b6000819050919050565b612a5883612a23565b612a6c612a6482612a45565b8484546129c7565b825550505050565b600090565b612a81612a74565b612a8c818484612a4f565b505050565b5b81811015612ab057612aa5600082612a79565b600181019050612a92565b5050565b601f821115612af557612ac681612995565b612acf846129aa565b81016020851015612ade578190505b612af2612aea856129aa565b830182612a91565b50505b505050565b600082821c905092915050565b6000612b1860001984600802612afa565b1980831691505092915050565b6000612b318383612b07565b9150826002028217905092915050565b818103612b4f575050612c27565b612b588261297f565b67ffffffffffffffff811115612b7157612b70611b66565b5b612b7b82546124bf565b612b86828285612ab4565b6000601f831160018114612bb55760008415612ba3578287015490505b612bad8582612b25565b865550612c20565b601f198416612bc387612995565b9650612bce86612995565b60005b82811015612bf657848901548255600182019150600185019450602081019050612bd1565b86831015612c135784890154612c0f601f891682612b07565b8355505b6001600288020188555050505b5050505050505b565b612c3281611d8a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c6d81611b1a565b82525050565b6000612c7f8383612c64565b60208301905092915050565b6000602082019050919050565b6000612ca382612c38565b612cad8185612c43565b9350612cb883612c54565b8060005b83811015612ce9578151612cd08882612c73565b9750612cdb83612c8b565b925050600181019050612cbc565b5085935050505092915050565b6000606083016000830151612d0e6000860182612c29565b5060208301518482036020860152612d268282612c98565b91505060408301518482036040860152612d408282612c98565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000612da8612da383612d7e565b612d8b565b9050919050565b600082825260208201905092915050565b60008154612dcd816124bf565b612dd78186612daf565b94506001821660008114612df25760018114612e0857612e3b565b60ff198316865281151560200286019350612e3b565b612e1185612995565b60005b83811015612e3357815481890152600182019150602081019050612e14565b808801955050505b50505092915050565b6000606083016000808401549050612e5b81612d95565b612e686000870182612c64565b50600184018583036020870152612e7f8382612dc0565b92505060028401549050612e9281612d95565b612e9f6040870182612c64565b50819250505092915050565b6000612eb78383612e44565b905092915050565b6000600382019050919050565b6000612ed782612d4d565b612ee18185612d58565b935083602082028501612ef385612d69565b8060005b85811015612f2e57848403895281612f0f8582612eab565b9450612f1a83612ebf565b925060208a01995050600181019050612ef7565b50829750879550505050505092915050565b6000606082019050612f5560008301866127af565b8181036020830152612f678185612cf6565b90508181036040830152612f7b8184612ecc565b9050949350505050565b600082825260208201905092915050565b6000612fa182612c38565b612fab8185612f85565b9350612fb683612c54565b8060005b83811015612fe7578151612fce8882612c73565b9750612fd983612c8b565b925050600181019050612fba565b5085935050505092915050565b600060a08201905061300960008301886127af565b818103602083015261301b8187612f96565b9050818103604083015261302f8186612f96565b905061303e60608301856126d7565b81810360808301526130508184612ecc565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613092601f8361251f565b915061309d8261305c565b602082019050919050565b600060208201905081810360008301526130c181613085565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061310282611b1a565b915061310d83611b1a565b92508261311d5761311c6130c8565b5b828204905092915050565b600060208201905061313d60008301846127af565b9291505056fea26469706673582212208438769da3b5f93fe636de6c47df381c211dcf3173438da70c2e3772f123578564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1986,
        "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
        "label": "s",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AppStorage)2743_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)2669_storage)dyn_storage": {
        "base": "t_struct(Option)2669_storage",
        "encoding": "dynamic_array",
        "label": "struct Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)2705_storage)dyn_storage": {
        "base": "t_struct(Proposal)2705_storage",
        "encoding": "dynamic_array",
        "label": "struct Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)2678_storage)dyn_storage": {
        "base": "t_struct(Voter)2678_storage",
        "encoding": "dynamic_array",
        "label": "struct Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)729": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)2662": {
        "encoding": "inplace",
        "label": "enum ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)2658": {
        "encoding": "inplace",
        "label": "enum ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)782_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)782_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)2705_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)2705_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)2743_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 2707,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2711,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2717,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "allowances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 2722,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "nonces",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Counter)782_storage)"
          },
          {
            "astId": 2725,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "larToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)729"
          },
          {
            "astId": 2727,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2732,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Proposal)2705_storage)"
          },
          {
            "astId": 2735,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalsList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2739,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalsArray",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Proposal)2705_storage)dyn_storage"
          },
          {
            "astId": 2742,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalsId",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Counter)782_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 781,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Option)2669_storage": {
        "encoding": "inplace",
        "label": "struct Option",
        "members": [
          {
            "astId": 2664,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2666,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2668,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)2705_storage": {
        "encoding": "inplace",
        "label": "struct Proposal",
        "members": [
          {
            "astId": 2680,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2682,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2684,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2686,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2689,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)2658"
          },
          {
            "astId": 2692,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)2662"
          },
          {
            "astId": 2694,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2696,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2700,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)2669_storage)dyn_storage"
          },
          {
            "astId": 2704,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)2678_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)2678_storage": {
        "encoding": "inplace",
        "label": "struct Voter",
        "members": [
          {
            "astId": 2671,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2674,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2677,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}