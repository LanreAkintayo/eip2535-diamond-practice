{
  "address": "0x76460E1174637f3885ADD3631Ff1979350160020",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Voter",
          "name": "voter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionVotes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "proposalOptions",
          "type": "tuple[]"
        }
      ],
      "name": "VoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "checkVotingStatus",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum ProposalStatus",
              "name": "proposalStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "optionText",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "vote",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Option[]",
              "name": "options",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "voterAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionIndexes",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionVotes",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Voter[]",
              "name": "voters",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Proposal[]",
          "name": "proposalsArray",
          "type": "tuple[]"
        }
      ],
      "name": "getProposalIndex",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByQuadratic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4d74723e28b1c2dae4abda25d0c7db0eb4a746e5ae56fe0b9f58f0e58fe3b84",
  "receipt": {
    "to": null,
    "from": "0xec2B1547294a4dd62C0aE651aEb01493f8e4cD74",
    "contractAddress": "0x76460E1174637f3885ADD3631Ff1979350160020",
    "transactionIndex": 14,
    "gasUsed": "2801479",
    "logsBloom": "0x
    "blockHash": "0x978ad485dbc8f692b166ba7e1c1515f1d913b0003c7c8791b7724b703db099ba",
    "transactionHash": "0xf4d74723e28b1c2dae4abda25d0c7db0eb4a746e5ae56fe0b9f58f0e58fe3b84",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 38040472,
        "transactionHash": "0xf4d74723e28b1c2dae4abda25d0c7db0eb4a746e5ae56fe0b9f58f0e58fe3b84",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec2b1547294a4dd62c0ae651aeb01493f8e4cd74",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000eede53cf609000000000000000000000000000000000000000000000000000b31e5965cf825f00000000000000000000000000000000000000000000020d49cd3dc80be5b44aa0000000000000000000000000000000000000000000000000b22f7b120021cf00000000000000000000000000000000000000000000020d49ce2ca65fb514daa",
        "logIndex": 54,
        "blockHash": "0x978ad485dbc8f692b166ba7e1c1515f1d913b0003c7c8791b7724b703db099ba"
      }
    ],
    "blockNumber": 38040472,
    "cumulativeGasUsed": "4585476",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "47d1b98fee85202380e996d7eb635716",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Voter\",\"name\":\"voter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"proposalOptions\",\"type\":\"tuple[]\"}],\"name\":\"VoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"checkVotingStatus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Proposal[]\",\"name\":\"proposalsArray\",\"type\":\"tuple[]\"}],\"name\":\"getProposalIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByQuadratic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/QuadraticVoteFacet.sol\":\"QuadraticVoteFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/facets/QuadraticVoteFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport {AppStorage, ProposalType, ProposalStatus, Option, Voter, Proposal} from \\\"../libraries/LibAppStorage.sol\\\";\\r\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\r\\n\\r\\ncontract QuadraticVoteFacet is ReentrancyGuard {\\r\\n    AppStorage internal s;\\r\\n\\r\\n    event VoteCreated(\\r\\n        uint id,\\r\\n        uint[] optionVotes,\\r\\n        uint[] optionIndexes,\\r\\n        address voterAddress,\\r\\n        Option[] proposalOptions\\r\\n    );\\r\\n\\r\\n    event Vote(uint256 id, Voter voter, Option[] options);\\r\\n\\r\\n    function voteProposalByQuadratic(\\r\\n            uint256 id,\\r\\n            uint256[] memory indexes,\\r\\n            uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = s.proposals[id];\\r\\n\\r\\n        require(\\r\\n            proposal.proposalType == ProposalType.Quadratic,\\r\\n            \\\"quadratic voting not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"Voted already\\\");\\r\\n        require(\\r\\n            s.larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient VP\\\"\\r\\n        );\\r\\n        s.larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            console.log(LibAppStorage.sqrt(currentOptionVotingPower) * (10 ** 9));\\r\\n            s.proposals[id].options[currentOptionIndex].vote +=\\r\\n                LibAppStorage.sqrt(currentOptionVotingPower) *\\r\\n                (10 ** 9);\\r\\n        }\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](votingPower.length);\\r\\n        for (uint i = 0; i < votingPower.length; i++) {\\r\\n            optionVotes[i] = LibAppStorage.sqrt(votingPower[i]) * (10 ** 9);\\r\\n        }\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        s.proposals[id].voters.push(voter);\\r\\n\\r\\n        // Update proposalsArray\\r\\n        int index = getProposalIndex(id, s.proposalsArray);\\r\\n        require(index != -1, \\\"Proposal cannot be found\\\");\\r\\n\\r\\n        delete s.proposalsArray[uint(index)];\\r\\n\\r\\n        s.proposalsArray[uint(index)] = s.proposals[id];\\r\\n\\r\\n        emit Vote(id, voter, s.proposals[id].options);\\r\\n        emit VoteCreated(\\r\\n            id,\\r\\n            optionVotes,\\r\\n            indexes,\\r\\n            msg.sender,\\r\\n            s.proposals[id].options\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTotalVotingPower(\\r\\n        uint256[] memory votingPower\\r\\n    ) internal pure returns (uint256 totalVotingPower) {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n     function getProposalIndex(\\r\\n        uint id,\\r\\n        Proposal[] memory proposalsArray\\r\\n    ) public pure returns (int256) {\\r\\n        for (uint i = 0; i < proposalsArray.length; i++) {\\r\\n            Proposal memory currentProposal = proposalsArray[i];\\r\\n            if (currentProposal.id == id) {\\r\\n                return int(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n\\r\\n    function checkVotingStatus(\\r\\n        uint256 id,\\r\\n        address voter\\r\\n    ) public view returns (int256) {\\r\\n        Voter[] memory voters = s.proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x7dc14046f13459e9acedaf33e58d928237ec01319a8834878deec42422538fcd\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n\\r\\n/*\\r\\n    export interface Proposal {\\r\\n        id: string;\\r\\n        creator: string;\\r\\n        description: string;\\r\\n        duration: number;\\r\\n        proposalStatus: string;\\r\\n        proposalType: string;\\r\\n        latestOptions: string[][] | undefined;\\r\\n        startDate: number;\\r\\n        endDate: number;\\r\\n        status: string;\\r\\n        timeLeft: number;\\r\\n        title: string;\\r\\n        optionsArray: {\\r\\n            optionIndex: string;\\r\\n            optionText: string;\\r\\n            optionVote: string;\\r\\n            optionPercentage: string;\\r\\n        }[];\\r\\n        validOptions: string[][];\\r\\n\\r\\n    }\\r\\n\\r\\n*/\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    \\r\\n  proposal1 = {\\r\\n      latestOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      optionsArray: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      validOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n\\r\\n\\r\\n  allProposals = [proposal1, proposal2, proposal3, e.t.c.]\\r\\n  \\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  Whenever someone votes, the proposalsArray has to be updated. The mapping to has to be updated\\r\\n    \\r\\n     */\\r\\n\\r\\n\\r\\n    \\r\\nstruct AppStorage {\\r\\n    uint256 totalSupply;\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(address => uint256)) allowances;\\r\\n    mapping(address => Counters.Counter) nonces;  \\r\\n\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    mapping(uint256 => Proposal) proposals;\\r\\n\\r\\n    uint256[] proposalsList;\\r\\n\\r\\n    Proposal[] proposalsArray;\\r\\n\\r\\n    uint256[] proposalsId;\\r\\n\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage {\\r\\n    // diamondStorage() returns the position of the App storage struct in the diamond contract\\r\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\r\\n        assembly {\\r\\n            ds.slot := 0\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x179cda448f2848044be22f29a693ce529977d96aa436670c209278f6be466026\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160008190555061316d806100286000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632d2a15441461004657806397ae153514610062578063da12935c14610092575b600080fd5b610060600480360381019061005b9190611c9d565b6100c2565b005b61007c600480360381019061007791906123b4565b611359565b6040516100899190612429565b60405180910390f35b6100ac60048036038101906100a79190612444565b6113dd565b6040516100b99190612429565b60405180910390f35b600260005403610107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fe906124e1565b60405180910390fd5b6002600081905550600061011a82611604565b9050600061012885336113dd565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546101be90612530565b80601f01602080910402602001604051908101604052809291908181526020018280546101ea90612530565b80156102375780601f1061020c57610100808354040283529160200191610237565b820191906000526020600020905b81548152906001019060200180831161021a57829003601f168201915b5050505050815260200160038201805461025090612530565b80601f016020809104026020016040519081016040528092919081815260200182805461027c90612530565b80156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156102f7576102f6612561565b5b600281111561030957610308612561565b5b81526020016004820160019054906101000a900460ff16600281111561033257610331612561565b5b600281111561034457610343612561565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156104595783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546103be90612530565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90612530565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610381565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156105be57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561054e57602002820191906000526020600020905b81548152602001906001019080831161053a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156105a657602002820191906000526020600020905b815481526020019060010190808311610592575b50505050508152505081526020019060010190610486565b505050508152505090506002808111156105db576105da612561565b5b816080015160028111156105f2576105f1612561565b5b14610632576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610629906125dc565b60405180910390fd5b8060e001518160c00151610646919061262b565b4210610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e906126ab565b60405180910390fd5b600082126106ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c190612717565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107299190612746565b602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190612776565b10156107ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a2906127ef565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161080d9392919061281e565b6020604051808303816000875af115801561082c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610850919061288d565b5060005b855181101561093a576000868281518110610872576108716128ba565b5b602002602001015190506000868381518110610891576108906128ba565b5b602002602001015190506108bb633b9aca006108ac83611656565b6108b691906128e9565b6116d0565b633b9aca006108c982611656565b6108d391906128e9565b600160060160008b815260200190815260200160002060070183815481106108fe576108fd6128ba565b5b9060005260206000209060030201600201600082825461091e919061262b565b92505081905550505080806109329061292b565b915050610854565b506000845167ffffffffffffffff81111561095857610957611b5a565b5b6040519080825280602002602001820160405280156109865781602001602082028036833780820191505090505b50905060005b85518110156109f957633b9aca006109bd8783815181106109b0576109af6128ba565b5b6020026020010151611656565b6109c791906128e9565b8282815181106109da576109d96128ba565b5b60200260200101818152505080806109f19061292b565b91505061098c565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610ad5929190611792565b506040820151816002019080519060200190610af2929190611792565b5050506000610fd4896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610fcb578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610bb490612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610be090612530565b8015610c2d5780601f10610c0257610100808354040283529160200191610c2d565b820191906000526020600020905b815481529060010190602001808311610c1057829003601f168201915b50505050508152602001600382018054610c4690612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7290612530565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610ced57610cec612561565b5b6002811115610cff57610cfe612561565b5b81526020016004820160019054906101000a900460ff166002811115610d2857610d27612561565b5b6002811115610d3a57610d39612561565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610e4f578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610db490612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610de090612530565b8015610e2d5780601f10610e0257610100808354040283529160200191610e2d565b820191906000526020600020905b815481529060010190602001808311610e1057829003601f168201915b5050505050815260200160028201548152505081526020019060010190610d77565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610fb457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f4457602002820191906000526020600020905b815481526020019060010190808311610f30575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f9c57602002820191906000526020600020905b815481526020019060010190808311610f88575b50505050508152505081526020019060010190610e7c565b505050508152505081526020019060010190610b20565b50505050611359565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f906129bf565b60405180910390fd5b6001600801818154811061104f5761104e6128ba565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061109d91906117df565b6003820160006110ad91906117df565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110f5919061181f565b6008820160006111059190611843565b5050600160060160008a815260200190815260200160002060016008018281548110611134576111336128ba565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816111c79190612ba1565b50600382018160030190816111dc9190612ba1565b506004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600281111561121557611214612561565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561125257611251612561565b5b021790555060058201548160050155600682015481600601556007820181600701908054611281929190611867565b5060088201816008019080546112989291906118e8565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d81526020019081526020016000206007016040516112e793929190612fa0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848a33600160060160008f815260200190815260200160002060070160405161133e959493929190613054565b60405180910390a15050505050506001600081905550505050565b600080600090505b82518110156113b257600083828151811061137f5761137e6128ba565b5b602002602001015190508481600001510361139e5781925050506113d7565b5080806113aa9061292b565b915050611361565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561155157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156114e157602002820191906000526020600020905b8154815260200190600101908083116114cd575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561153957602002820191906000526020600020905b815481526020019060010190808311611525575b50505050508152505081526020019060010190611419565b50505050905060005b81518110156115d8576000828281518110611578576115776128ba565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036115c4578193505050506115fe565b5080806115d09061292b565b91505061155a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b600080600090505b825181101561165057828181518110611628576116276128ba565b5b60200260200101518261163b919061262b565b915080806116489061292b565b91505061160c565b50919050565b600060038211156116bd578190506000600160028461167591906130eb565b61167f919061262b565b90505b818110156116b757809150600281828561169c91906130eb565b6116a6919061262b565b6116b091906130eb565b9050611682565b506116cb565b600082146116ca57600190505b5b919050565b611766816040516024016116e4919061311c565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611769565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280548282559060005260206000209081019282156117ce579160200282015b828111156117cd5782518255916020019190600101906117b2565b5b5090506117db91906119d5565b5090565b5080546117eb90612530565b6000825580601f106117fd575061181c565b601f01602090049060005260206000209081019061181b91906119d5565b5b50565b508054600082556003029060005260206000209081019061184091906119f2565b50565b50805460008255600302906000526020600020908101906118649190611a29565b50565b8280548282559060005260206000209060030281019282156118d75760005260206000209160030282015b828111156118d657828260008201548160000155600182018160010190816118ba9190612ba1565b5060028201548160020155505091600301919060030190611892565b5b5090506118e491906119f2565b5090565b8280548282559060005260206000209060030281019282156119c45760005260206000209160030282015b828111156119c35782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182018160010190805461199a929190611a87565b5060028201816002019080546119b1929190611a87565b50505091600301919060030190611913565b5b5090506119d19190611a29565b5090565b5b808211156119ee5760008160009055506001016119d6565b5090565b5b80821115611a2557600080820160009055600182016000611a1491906117df565b6002820160009055506003016119f3565b5090565b5b80821115611a8357600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000611a6a9190611ad9565b600282016000611a7a9190611ad9565b50600301611a2a565b5090565b828054828255906000526020600020908101928215611ac85760005260206000209182015b82811115611ac7578254825591600101919060010190611aac565b5b509050611ad591906119d5565b5090565b5080546000825590600052602060002090810190611af791906119d5565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b2181611b0e565b8114611b2c57600080fd5b50565b600081359050611b3e81611b18565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9282611b49565b810181811067ffffffffffffffff82111715611bb157611bb0611b5a565b5b80604052505050565b6000611bc4611afa565b9050611bd08282611b89565b919050565b600067ffffffffffffffff821115611bf057611bef611b5a565b5b602082029050602081019050919050565b600080fd5b6000611c19611c1484611bd5565b611bba565b90508083825260208201905060208402830185811115611c3c57611c3b611c01565b5b835b81811015611c655780611c518882611b2f565b845260208401935050602081019050611c3e565b5050509392505050565b600082601f830112611c8457611c83611b44565b5b8135611c94848260208601611c06565b91505092915050565b600080600060608486031215611cb657611cb5611b04565b5b6000611cc486828701611b2f565b935050602084013567ffffffffffffffff811115611ce557611ce4611b09565b5b611cf186828701611c6f565b925050604084013567ffffffffffffffff811115611d1257611d11611b09565b5b611d1e86828701611c6f565b9150509250925092565b600067ffffffffffffffff821115611d4357611d42611b5a565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d8982611d5e565b9050919050565b611d9981611d7e565b8114611da457600080fd5b50565b600081359050611db681611d90565b92915050565b600080fd5b600067ffffffffffffffff821115611ddc57611ddb611b5a565b5b611de582611b49565b9050602081019050919050565b82818337600083830152505050565b6000611e14611e0f84611dc1565b611bba565b905082815260208101848484011115611e3057611e2f611dbc565b5b611e3b848285611df2565b509392505050565b600082601f830112611e5857611e57611b44565b5b8135611e68848260208601611e01565b91505092915050565b60038110611e7e57600080fd5b50565b600081359050611e9081611e71565b92915050565b60038110611ea357600080fd5b50565b600081359050611eb581611e96565b92915050565b600067ffffffffffffffff821115611ed657611ed5611b5a565b5b602082029050602081019050919050565b600060608284031215611efd57611efc611d54565b5b611f076060611bba565b90506000611f1784828501611b2f565b600083015250602082013567ffffffffffffffff811115611f3b57611f3a611d59565b5b611f4784828501611e43565b6020830152506040611f5b84828501611b2f565b60408301525092915050565b6000611f7a611f7584611ebb565b611bba565b90508083825260208201905060208402830185811115611f9d57611f9c611c01565b5b835b81811015611fe457803567ffffffffffffffff811115611fc257611fc1611b44565b5b808601611fcf8982611ee7565b85526020850194505050602081019050611f9f565b5050509392505050565b600082601f83011261200357612002611b44565b5b8135612013848260208601611f67565b91505092915050565b600067ffffffffffffffff82111561203757612036611b5a565b5b602082029050602081019050919050565b60006060828403121561205e5761205d611d54565b5b6120686060611bba565b9050600061207884828501611da7565b600083015250602082013567ffffffffffffffff81111561209c5761209b611d59565b5b6120a884828501611c6f565b602083015250604082013567ffffffffffffffff8111156120cc576120cb611d59565b5b6120d884828501611c6f565b60408301525092915050565b60006120f76120f28461201c565b611bba565b9050808382526020820190506020840283018581111561211a57612119611c01565b5b835b8181101561216157803567ffffffffffffffff81111561213f5761213e611b44565b5b80860161214c8982612048565b8552602085019450505060208101905061211c565b5050509392505050565b600082601f8301126121805761217f611b44565b5b81356121908482602086016120e4565b91505092915050565b600061014082840312156121b0576121af611d54565b5b6121bb610140611bba565b905060006121cb84828501611b2f565b60008301525060206121df84828501611da7565b602083015250604082013567ffffffffffffffff81111561220357612202611d59565b5b61220f84828501611e43565b604083015250606082013567ffffffffffffffff81111561223357612232611d59565b5b61223f84828501611e43565b606083015250608061225384828501611e81565b60808301525060a061226784828501611ea6565b60a08301525060c061227b84828501611b2f565b60c08301525060e061228f84828501611b2f565b60e08301525061010082013567ffffffffffffffff8111156122b4576122b3611d59565b5b6122c084828501611fee565b6101008301525061012082013567ffffffffffffffff8111156122e6576122e5611d59565b5b6122f28482850161216b565b6101208301525092915050565b600061231261230d84611d28565b611bba565b9050808382526020820190506020840283018581111561233557612334611c01565b5b835b8181101561237c57803567ffffffffffffffff81111561235a57612359611b44565b5b8086016123678982612199565b85526020850194505050602081019050612337565b5050509392505050565b600082601f83011261239b5761239a611b44565b5b81356123ab8482602086016122ff565b91505092915050565b600080604083850312156123cb576123ca611b04565b5b60006123d985828601611b2f565b925050602083013567ffffffffffffffff8111156123fa576123f9611b09565b5b61240685828601612386565b9150509250929050565b6000819050919050565b61242381612410565b82525050565b600060208201905061243e600083018461241a565b92915050565b6000806040838503121561245b5761245a611b04565b5b600061246985828601611b2f565b925050602061247a85828601611da7565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006124cb601f83612484565b91506124d682612495565b602082019050919050565b600060208201905081810360008301526124fa816124be565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061254857607f821691505b60208210810361255b5761255a612501565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656400000000600082015250565b60006125c6601c83612484565b91506125d182612590565b602082019050919050565b600060208201905081810360008301526125f5816125b9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061263682611b0e565b915061264183611b0e565b9250828201905080821115612659576126586125fc565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b6000612695600f83612484565b91506126a08261265f565b602082019050919050565b600060208201905081810360008301526126c481612688565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b6000612701600d83612484565b915061270c826126cb565b602082019050919050565b60006020820190508181036000830152612730816126f4565b9050919050565b61274081611d7e565b82525050565b600060208201905061275b6000830184612737565b92915050565b60008151905061277081611b18565b92915050565b60006020828403121561278c5761278b611b04565b5b600061279a84828501612761565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b60006127d9600f83612484565b91506127e4826127a3565b602082019050919050565b60006020820190508181036000830152612808816127cc565b9050919050565b61281881611b0e565b82525050565b60006060820190506128336000830186612737565b6128406020830185612737565b61284d604083018461280f565b949350505050565b60008115159050919050565b61286a81612855565b811461287557600080fd5b50565b60008151905061288781612861565b92915050565b6000602082840312156128a3576128a2611b04565b5b60006128b184828501612878565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128f482611b0e565b91506128ff83611b0e565b925082820261290d81611b0e565b91508282048414831517612924576129236125fc565b5b5092915050565b600061293682611b0e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612968576129676125fc565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b60006129a9601883612484565b91506129b482612973565b602082019050919050565b600060208201905081810360008301526129d88161299c565b9050919050565b6000815490506129ee81612530565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a1a565b612a618683612a1a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a9e612a99612a9484611b0e565b612a79565b611b0e565b9050919050565b6000819050919050565b612ab883612a83565b612acc612ac482612aa5565b848454612a27565b825550505050565b600090565b612ae1612ad4565b612aec818484612aaf565b505050565b5b81811015612b1057612b05600082612ad9565b600181019050612af2565b5050565b601f821115612b5557612b26816129f5565b612b2f84612a0a565b81016020851015612b3e578190505b612b52612b4a85612a0a565b830182612af1565b50505b505050565b600082821c905092915050565b6000612b7860001984600802612b5a565b1980831691505092915050565b6000612b918383612b67565b9150826002028217905092915050565b818103612baf575050612c87565b612bb8826129df565b67ffffffffffffffff811115612bd157612bd0611b5a565b5b612bdb8254612530565b612be6828285612b14565b6000601f831160018114612c155760008415612c03578287015490505b612c0d8582612b85565b865550612c80565b601f198416612c23876129f5565b9650612c2e866129f5565b60005b82811015612c5657848901548255600182019150600185019450602081019050612c31565b86831015612c735784890154612c6f601f891682612b67565b8355505b6001600288020188555050505b5050505050505b565b612c9281611d7e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ccd81611b0e565b82525050565b6000612cdf8383612cc4565b60208301905092915050565b6000602082019050919050565b6000612d0382612c98565b612d0d8185612ca3565b9350612d1883612cb4565b8060005b83811015612d49578151612d308882612cd3565b9750612d3b83612ceb565b925050600181019050612d1c565b5085935050505092915050565b6000606083016000830151612d6e6000860182612c89565b5060208301518482036020860152612d868282612cf8565b91505060408301518482036040860152612da08282612cf8565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000612e08612e0383612dde565b612deb565b9050919050565b600082825260208201905092915050565b60008154612e2d81612530565b612e378186612e0f565b94506001821660008114612e525760018114612e6857612e9b565b60ff198316865281151560200286019350612e9b565b612e71856129f5565b60005b83811015612e9357815481890152600182019150602081019050612e74565b808801955050505b50505092915050565b6000606083016000808401549050612ebb81612df5565b612ec86000870182612cc4565b50600184018583036020870152612edf8382612e20565b92505060028401549050612ef281612df5565b612eff6040870182612cc4565b50819250505092915050565b6000612f178383612ea4565b905092915050565b6000600382019050919050565b6000612f3782612dad565b612f418185612db8565b935083602082028501612f5385612dc9565b8060005b85811015612f8e57848403895281612f6f8582612f0b565b9450612f7a83612f1f565b925060208a01995050600181019050612f57565b50829750879550505050505092915050565b6000606082019050612fb5600083018661280f565b8181036020830152612fc78185612d56565b90508181036040830152612fdb8184612f2c565b9050949350505050565b600082825260208201905092915050565b600061300182612c98565b61300b8185612fe5565b935061301683612cb4565b8060005b8381101561304757815161302e8882612cd3565b975061303983612ceb565b92505060018101905061301a565b5085935050505092915050565b600060a082019050613069600083018861280f565b818103602083015261307b8187612ff6565b9050818103604083015261308f8186612ff6565b905061309e6060830185612737565b81810360808301526130b08184612f2c565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130f682611b0e565b915061310183611b0e565b925082613111576131106130bc565b5b828204905092915050565b6000602082019050613131600083018461280f565b9291505056fea264697066735822122063c164449e43d881481ea97a38e2b876c8537d426bf4dc934b7ee1212121c0e664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632d2a15441461004657806397ae153514610062578063da12935c14610092575b600080fd5b610060600480360381019061005b9190611c9d565b6100c2565b005b61007c600480360381019061007791906123b4565b611359565b6040516100899190612429565b60405180910390f35b6100ac60048036038101906100a79190612444565b6113dd565b6040516100b99190612429565b60405180910390f35b600260005403610107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fe906124e1565b60405180910390fd5b6002600081905550600061011a82611604565b9050600061012885336113dd565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546101be90612530565b80601f01602080910402602001604051908101604052809291908181526020018280546101ea90612530565b80156102375780601f1061020c57610100808354040283529160200191610237565b820191906000526020600020905b81548152906001019060200180831161021a57829003601f168201915b5050505050815260200160038201805461025090612530565b80601f016020809104026020016040519081016040528092919081815260200182805461027c90612530565b80156102c95780601f1061029e576101008083540402835291602001916102c9565b820191906000526020600020905b8154815290600101906020018083116102ac57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156102f7576102f6612561565b5b600281111561030957610308612561565b5b81526020016004820160019054906101000a900460ff16600281111561033257610331612561565b5b600281111561034457610343612561565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156104595783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546103be90612530565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90612530565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610381565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156105be57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561054e57602002820191906000526020600020905b81548152602001906001019080831161053a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156105a657602002820191906000526020600020905b815481526020019060010190808311610592575b50505050508152505081526020019060010190610486565b505050508152505090506002808111156105db576105da612561565b5b816080015160028111156105f2576105f1612561565b5b14610632576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610629906125dc565b60405180910390fd5b8060e001518160c00151610646919061262b565b4210610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e906126ab565b60405180910390fd5b600082126106ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c190612717565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107299190612746565b602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190612776565b10156107ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a2906127ef565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161080d9392919061281e565b6020604051808303816000875af115801561082c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610850919061288d565b5060005b855181101561093a576000868281518110610872576108716128ba565b5b602002602001015190506000868381518110610891576108906128ba565b5b602002602001015190506108bb633b9aca006108ac83611656565b6108b691906128e9565b6116d0565b633b9aca006108c982611656565b6108d391906128e9565b600160060160008b815260200190815260200160002060070183815481106108fe576108fd6128ba565b5b9060005260206000209060030201600201600082825461091e919061262b565b92505081905550505080806109329061292b565b915050610854565b506000845167ffffffffffffffff81111561095857610957611b5a565b5b6040519080825280602002602001820160405280156109865781602001602082028036833780820191505090505b50905060005b85518110156109f957633b9aca006109bd8783815181106109b0576109af6128ba565b5b6020026020010151611656565b6109c791906128e9565b8282815181106109da576109d96128ba565b5b60200260200101818152505080806109f19061292b565b91505061098c565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610ad5929190611792565b506040820151816002019080519060200190610af2929190611792565b5050506000610fd4896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610fcb578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610bb490612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610be090612530565b8015610c2d5780601f10610c0257610100808354040283529160200191610c2d565b820191906000526020600020905b815481529060010190602001808311610c1057829003601f168201915b50505050508152602001600382018054610c4690612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7290612530565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610ced57610cec612561565b5b6002811115610cff57610cfe612561565b5b81526020016004820160019054906101000a900460ff166002811115610d2857610d27612561565b5b6002811115610d3a57610d39612561565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610e4f578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610db490612530565b80601f0160208091040260200160405190810160405280929190818152602001828054610de090612530565b8015610e2d5780601f10610e0257610100808354040283529160200191610e2d565b820191906000526020600020905b815481529060010190602001808311610e1057829003601f168201915b5050505050815260200160028201548152505081526020019060010190610d77565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610fb457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f4457602002820191906000526020600020905b815481526020019060010190808311610f30575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f9c57602002820191906000526020600020905b815481526020019060010190808311610f88575b50505050508152505081526020019060010190610e7c565b505050508152505081526020019060010190610b20565b50505050611359565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f906129bf565b60405180910390fd5b6001600801818154811061104f5761104e6128ba565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061109d91906117df565b6003820160006110ad91906117df565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110f5919061181f565b6008820160006111059190611843565b5050600160060160008a815260200190815260200160002060016008018281548110611134576111336128ba565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816111c79190612ba1565b50600382018160030190816111dc9190612ba1565b506004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600281111561121557611214612561565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561125257611251612561565b5b021790555060058201548160050155600682015481600601556007820181600701908054611281929190611867565b5060088201816008019080546112989291906118e8565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d81526020019081526020016000206007016040516112e793929190612fa0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848a33600160060160008f815260200190815260200160002060070160405161133e959493929190613054565b60405180910390a15050505050506001600081905550505050565b600080600090505b82518110156113b257600083828151811061137f5761137e6128ba565b5b602002602001015190508481600001510361139e5781925050506113d7565b5080806113aa9061292b565b915050611361565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561155157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156114e157602002820191906000526020600020905b8154815260200190600101908083116114cd575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561153957602002820191906000526020600020905b815481526020019060010190808311611525575b50505050508152505081526020019060010190611419565b50505050905060005b81518110156115d8576000828281518110611578576115776128ba565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036115c4578193505050506115fe565b5080806115d09061292b565b91505061155a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b600080600090505b825181101561165057828181518110611628576116276128ba565b5b60200260200101518261163b919061262b565b915080806116489061292b565b91505061160c565b50919050565b600060038211156116bd578190506000600160028461167591906130eb565b61167f919061262b565b90505b818110156116b757809150600281828561169c91906130eb565b6116a6919061262b565b6116b091906130eb565b9050611682565b506116cb565b600082146116ca57600190505b5b919050565b611766816040516024016116e4919061311c565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611769565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280548282559060005260206000209081019282156117ce579160200282015b828111156117cd5782518255916020019190600101906117b2565b5b5090506117db91906119d5565b5090565b5080546117eb90612530565b6000825580601f106117fd575061181c565b601f01602090049060005260206000209081019061181b91906119d5565b5b50565b508054600082556003029060005260206000209081019061184091906119f2565b50565b50805460008255600302906000526020600020908101906118649190611a29565b50565b8280548282559060005260206000209060030281019282156118d75760005260206000209160030282015b828111156118d657828260008201548160000155600182018160010190816118ba9190612ba1565b5060028201548160020155505091600301919060030190611892565b5b5090506118e491906119f2565b5090565b8280548282559060005260206000209060030281019282156119c45760005260206000209160030282015b828111156119c35782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182018160010190805461199a929190611a87565b5060028201816002019080546119b1929190611a87565b50505091600301919060030190611913565b5b5090506119d19190611a29565b5090565b5b808211156119ee5760008160009055506001016119d6565b5090565b5b80821115611a2557600080820160009055600182016000611a1491906117df565b6002820160009055506003016119f3565b5090565b5b80821115611a8357600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000611a6a9190611ad9565b600282016000611a7a9190611ad9565b50600301611a2a565b5090565b828054828255906000526020600020908101928215611ac85760005260206000209182015b82811115611ac7578254825591600101919060010190611aac565b5b509050611ad591906119d5565b5090565b5080546000825590600052602060002090810190611af791906119d5565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b2181611b0e565b8114611b2c57600080fd5b50565b600081359050611b3e81611b18565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9282611b49565b810181811067ffffffffffffffff82111715611bb157611bb0611b5a565b5b80604052505050565b6000611bc4611afa565b9050611bd08282611b89565b919050565b600067ffffffffffffffff821115611bf057611bef611b5a565b5b602082029050602081019050919050565b600080fd5b6000611c19611c1484611bd5565b611bba565b90508083825260208201905060208402830185811115611c3c57611c3b611c01565b5b835b81811015611c655780611c518882611b2f565b845260208401935050602081019050611c3e565b5050509392505050565b600082601f830112611c8457611c83611b44565b5b8135611c94848260208601611c06565b91505092915050565b600080600060608486031215611cb657611cb5611b04565b5b6000611cc486828701611b2f565b935050602084013567ffffffffffffffff811115611ce557611ce4611b09565b5b611cf186828701611c6f565b925050604084013567ffffffffffffffff811115611d1257611d11611b09565b5b611d1e86828701611c6f565b9150509250925092565b600067ffffffffffffffff821115611d4357611d42611b5a565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d8982611d5e565b9050919050565b611d9981611d7e565b8114611da457600080fd5b50565b600081359050611db681611d90565b92915050565b600080fd5b600067ffffffffffffffff821115611ddc57611ddb611b5a565b5b611de582611b49565b9050602081019050919050565b82818337600083830152505050565b6000611e14611e0f84611dc1565b611bba565b905082815260208101848484011115611e3057611e2f611dbc565b5b611e3b848285611df2565b509392505050565b600082601f830112611e5857611e57611b44565b5b8135611e68848260208601611e01565b91505092915050565b60038110611e7e57600080fd5b50565b600081359050611e9081611e71565b92915050565b60038110611ea357600080fd5b50565b600081359050611eb581611e96565b92915050565b600067ffffffffffffffff821115611ed657611ed5611b5a565b5b602082029050602081019050919050565b600060608284031215611efd57611efc611d54565b5b611f076060611bba565b90506000611f1784828501611b2f565b600083015250602082013567ffffffffffffffff811115611f3b57611f3a611d59565b5b611f4784828501611e43565b6020830152506040611f5b84828501611b2f565b60408301525092915050565b6000611f7a611f7584611ebb565b611bba565b90508083825260208201905060208402830185811115611f9d57611f9c611c01565b5b835b81811015611fe457803567ffffffffffffffff811115611fc257611fc1611b44565b5b808601611fcf8982611ee7565b85526020850194505050602081019050611f9f565b5050509392505050565b600082601f83011261200357612002611b44565b5b8135612013848260208601611f67565b91505092915050565b600067ffffffffffffffff82111561203757612036611b5a565b5b602082029050602081019050919050565b60006060828403121561205e5761205d611d54565b5b6120686060611bba565b9050600061207884828501611da7565b600083015250602082013567ffffffffffffffff81111561209c5761209b611d59565b5b6120a884828501611c6f565b602083015250604082013567ffffffffffffffff8111156120cc576120cb611d59565b5b6120d884828501611c6f565b60408301525092915050565b60006120f76120f28461201c565b611bba565b9050808382526020820190506020840283018581111561211a57612119611c01565b5b835b8181101561216157803567ffffffffffffffff81111561213f5761213e611b44565b5b80860161214c8982612048565b8552602085019450505060208101905061211c565b5050509392505050565b600082601f8301126121805761217f611b44565b5b81356121908482602086016120e4565b91505092915050565b600061014082840312156121b0576121af611d54565b5b6121bb610140611bba565b905060006121cb84828501611b2f565b60008301525060206121df84828501611da7565b602083015250604082013567ffffffffffffffff81111561220357612202611d59565b5b61220f84828501611e43565b604083015250606082013567ffffffffffffffff81111561223357612232611d59565b5b61223f84828501611e43565b606083015250608061225384828501611e81565b60808301525060a061226784828501611ea6565b60a08301525060c061227b84828501611b2f565b60c08301525060e061228f84828501611b2f565b60e08301525061010082013567ffffffffffffffff8111156122b4576122b3611d59565b5b6122c084828501611fee565b6101008301525061012082013567ffffffffffffffff8111156122e6576122e5611d59565b5b6122f28482850161216b565b6101208301525092915050565b600061231261230d84611d28565b611bba565b9050808382526020820190506020840283018581111561233557612334611c01565b5b835b8181101561237c57803567ffffffffffffffff81111561235a57612359611b44565b5b8086016123678982612199565b85526020850194505050602081019050612337565b5050509392505050565b600082601f83011261239b5761239a611b44565b5b81356123ab8482602086016122ff565b91505092915050565b600080604083850312156123cb576123ca611b04565b5b60006123d985828601611b2f565b925050602083013567ffffffffffffffff8111156123fa576123f9611b09565b5b61240685828601612386565b9150509250929050565b6000819050919050565b61242381612410565b82525050565b600060208201905061243e600083018461241a565b92915050565b6000806040838503121561245b5761245a611b04565b5b600061246985828601611b2f565b925050602061247a85828601611da7565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006124cb601f83612484565b91506124d682612495565b602082019050919050565b600060208201905081810360008301526124fa816124be565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061254857607f821691505b60208210810361255b5761255a612501565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656400000000600082015250565b60006125c6601c83612484565b91506125d182612590565b602082019050919050565b600060208201905081810360008301526125f5816125b9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061263682611b0e565b915061264183611b0e565b9250828201905080821115612659576126586125fc565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b6000612695600f83612484565b91506126a08261265f565b602082019050919050565b600060208201905081810360008301526126c481612688565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b6000612701600d83612484565b915061270c826126cb565b602082019050919050565b60006020820190508181036000830152612730816126f4565b9050919050565b61274081611d7e565b82525050565b600060208201905061275b6000830184612737565b92915050565b60008151905061277081611b18565b92915050565b60006020828403121561278c5761278b611b04565b5b600061279a84828501612761565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b60006127d9600f83612484565b91506127e4826127a3565b602082019050919050565b60006020820190508181036000830152612808816127cc565b9050919050565b61281881611b0e565b82525050565b60006060820190506128336000830186612737565b6128406020830185612737565b61284d604083018461280f565b949350505050565b60008115159050919050565b61286a81612855565b811461287557600080fd5b50565b60008151905061288781612861565b92915050565b6000602082840312156128a3576128a2611b04565b5b60006128b184828501612878565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128f482611b0e565b91506128ff83611b0e565b925082820261290d81611b0e565b91508282048414831517612924576129236125fc565b5b5092915050565b600061293682611b0e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612968576129676125fc565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b60006129a9601883612484565b91506129b482612973565b602082019050919050565b600060208201905081810360008301526129d88161299c565b9050919050565b6000815490506129ee81612530565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a1a565b612a618683612a1a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a9e612a99612a9484611b0e565b612a79565b611b0e565b9050919050565b6000819050919050565b612ab883612a83565b612acc612ac482612aa5565b848454612a27565b825550505050565b600090565b612ae1612ad4565b612aec818484612aaf565b505050565b5b81811015612b1057612b05600082612ad9565b600181019050612af2565b5050565b601f821115612b5557612b26816129f5565b612b2f84612a0a565b81016020851015612b3e578190505b612b52612b4a85612a0a565b830182612af1565b50505b505050565b600082821c905092915050565b6000612b7860001984600802612b5a565b1980831691505092915050565b6000612b918383612b67565b9150826002028217905092915050565b818103612baf575050612c87565b612bb8826129df565b67ffffffffffffffff811115612bd157612bd0611b5a565b5b612bdb8254612530565b612be6828285612b14565b6000601f831160018114612c155760008415612c03578287015490505b612c0d8582612b85565b865550612c80565b601f198416612c23876129f5565b9650612c2e866129f5565b60005b82811015612c5657848901548255600182019150600185019450602081019050612c31565b86831015612c735784890154612c6f601f891682612b67565b8355505b6001600288020188555050505b5050505050505b565b612c9281611d7e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ccd81611b0e565b82525050565b6000612cdf8383612cc4565b60208301905092915050565b6000602082019050919050565b6000612d0382612c98565b612d0d8185612ca3565b9350612d1883612cb4565b8060005b83811015612d49578151612d308882612cd3565b9750612d3b83612ceb565b925050600181019050612d1c565b5085935050505092915050565b6000606083016000830151612d6e6000860182612c89565b5060208301518482036020860152612d868282612cf8565b91505060408301518482036040860152612da08282612cf8565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000612e08612e0383612dde565b612deb565b9050919050565b600082825260208201905092915050565b60008154612e2d81612530565b612e378186612e0f565b94506001821660008114612e525760018114612e6857612e9b565b60ff198316865281151560200286019350612e9b565b612e71856129f5565b60005b83811015612e9357815481890152600182019150602081019050612e74565b808801955050505b50505092915050565b6000606083016000808401549050612ebb81612df5565b612ec86000870182612cc4565b50600184018583036020870152612edf8382612e20565b92505060028401549050612ef281612df5565b612eff6040870182612cc4565b50819250505092915050565b6000612f178383612ea4565b905092915050565b6000600382019050919050565b6000612f3782612dad565b612f418185612db8565b935083602082028501612f5385612dc9565b8060005b85811015612f8e57848403895281612f6f8582612f0b565b9450612f7a83612f1f565b925060208a01995050600181019050612f57565b50829750879550505050505092915050565b6000606082019050612fb5600083018661280f565b8181036020830152612fc78185612d56565b90508181036040830152612fdb8184612f2c565b9050949350505050565b600082825260208201905092915050565b600061300182612c98565b61300b8185612fe5565b935061301683612cb4565b8060005b8381101561304757815161302e8882612cd3565b975061303983612ceb565b92505060018101905061301a565b5085935050505092915050565b600060a082019050613069600083018861280f565b818103602083015261307b8187612ff6565b9050818103604083015261308f8186612ff6565b905061309e6060830185612737565b81810360808301526130b08184612f2c565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130f682611b0e565b915061310183611b0e565b925082613111576131106130bc565b5b828204905092915050565b6000602082019050613131600083018461280f565b9291505056fea264697066735822122063c164449e43d881481ea97a38e2b876c8537d426bf4dc934b7ee1212121c0e664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
        "label": "s",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AppStorage)731_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)657_storage)dyn_storage": {
        "base": "t_struct(Option)657_storage",
        "encoding": "dynamic_array",
        "label": "struct Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)693_storage)dyn_storage": {
        "base": "t_struct(Proposal)693_storage",
        "encoding": "dynamic_array",
        "label": "struct Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)666_storage)dyn_storage": {
        "base": "t_struct(Voter)666_storage",
        "encoding": "dynamic_array",
        "label": "struct Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)650": {
        "encoding": "inplace",
        "label": "enum ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)646": {
        "encoding": "inplace",
        "label": "enum ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)123_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)123_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)693_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)693_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)731_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 695,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 699,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 705,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "allowances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 710,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "nonces",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Counter)123_storage)"
          },
          {
            "astId": 713,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "larToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)117"
          },
          {
            "astId": 715,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 720,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Proposal)693_storage)"
          },
          {
            "astId": 723,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalsList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 727,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalsArray",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Proposal)693_storage)dyn_storage"
          },
          {
            "astId": 730,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalsId",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Counter)123_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 122,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Option)657_storage": {
        "encoding": "inplace",
        "label": "struct Option",
        "members": [
          {
            "astId": 652,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 654,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 656,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)693_storage": {
        "encoding": "inplace",
        "label": "struct Proposal",
        "members": [
          {
            "astId": 668,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 670,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 672,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 674,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 677,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)646"
          },
          {
            "astId": 680,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)650"
          },
          {
            "astId": 682,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 684,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 688,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)657_storage)dyn_storage"
          },
          {
            "astId": 692,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)666_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)666_storage": {
        "encoding": "inplace",
        "label": "struct Voter",
        "members": [
          {
            "astId": 659,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 662,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 665,
            "contract": "contracts/facets/QuadraticVoteFacet.sol:QuadraticVoteFacet",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}