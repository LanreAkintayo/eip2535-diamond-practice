{
  "address": "0x6147D8Ba234a17536307C75916fD6Bf11bF44193",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Voter",
          "name": "voter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionVotes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Option[]",
          "name": "proposalOptions",
          "type": "tuple[]"
        }
      ],
      "name": "VoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "checkVotingStatus",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum ProposalStatus",
              "name": "proposalStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "optionText",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "vote",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Option[]",
              "name": "options",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "voterAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionIndexes",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionVotes",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Voter[]",
              "name": "voters",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Proposal[]",
          "name": "proposalsArray",
          "type": "tuple[]"
        }
      ],
      "name": "getProposalIndex",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalsArray",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum ProposalType",
              "name": "proposalType",
              "type": "uint8"
            },
            {
              "internalType": "enum ProposalStatus",
              "name": "proposalStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "optionText",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "vote",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Option[]",
              "name": "options",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "voterAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionIndexes",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "optionVotes",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Voter[]",
              "name": "voters",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "voteProposalBySingleChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByWeighing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e401f80438f1e17e254e1f3f7ffa7b94f0a50aa48299546bd808a636d86f4f4",
  "receipt": {
    "to": null,
    "from": "0xec2B1547294a4dd62C0aE651aEb01493f8e4cD74",
    "contractAddress": "0x6147D8Ba234a17536307C75916fD6Bf11bF44193",
    "transactionIndex": 10,
    "gasUsed": "4284928",
    "logsBloom": "0x
    "blockHash": "0xc0e6915919167997de9375371ab4288ec924f496ffee473904f2527bbe73883e",
    "transactionHash": "0x9e401f80438f1e17e254e1f3f7ffa7b94f0a50aa48299546bd808a636d86f4f4",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 37850151,
        "transactionHash": "0x9e401f80438f1e17e254e1f3f7ffa7b94f0a50aa48299546bd808a636d86f4f4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec2b1547294a4dd62c0ae651aeb01493f8e4cd74",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000016d5add0fe00000000000000000000000000000000000000000000000000001303ae0e59758fb600000000000000000000000000000000000000000000120d949103b5c0879d5a00000000000000000000000000000000000000000000000012ecd86088778fb600000000000000000000000000000000000000000000120d94a7d96391859d5a",
        "logIndex": 29,
        "blockHash": "0xc0e6915919167997de9375371ab4288ec924f496ffee473904f2527bbe73883e"
      }
    ],
    "blockNumber": 37850151,
    "cumulativeGasUsed": "6358576",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "621da97019bc054c6e8d0337770b63b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Voter\",\"name\":\"voter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Option[]\",\"name\":\"proposalOptions\",\"type\":\"tuple[]\"}],\"name\":\"VoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"checkVotingStatus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Proposal[]\",\"name\":\"proposalsArray\",\"type\":\"tuple[]\"}],\"name\":\"getProposalIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalsArray\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"voteProposalBySingleChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByWeighing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DaoFacet2.sol\":\"DaoFacet2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/facets/DaoFacet2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport {AppStorage, ProposalType, ProposalStatus, Option, Voter, Proposal} from \\\"../libraries/LibAppStorage.sol\\\";\\r\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\r\\n\\r\\ncontract DaoFacet2 is ReentrancyGuard {\\r\\n    AppStorage internal s;\\r\\n    \\r\\n    event VoteCreated(\\r\\n        uint id,\\r\\n        uint[] optionVotes,\\r\\n        uint[] optionIndexes,\\r\\n        address voterAddress,\\r\\n        Option[] proposalOptions\\r\\n    );\\r\\n\\r\\n    event Vote(uint256 id, Voter voter, Option[] options);\\r\\n\\r\\n    function voteProposalBySingleChoice(\\r\\n        uint256 id,\\r\\n        uint256 index,\\r\\n        uint256 votingPower\\r\\n    ) external nonReentrant {\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = s.proposals[id];\\r\\n\\r\\n        require(\\r\\n            proposal.proposalType == ProposalType.SingleChoice,\\r\\n            \\\"single choice voting not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"Voted already\\\");\\r\\n        require(\\r\\n            s.larToken.balanceOf(msg.sender) >= votingPower,\\r\\n            \\\"Insufficient VP\\\"\\r\\n        );\\r\\n\\r\\n        s.larToken.transferFrom(msg.sender, address(this), votingPower);\\r\\n\\r\\n        s.proposals[id].options[index].vote += votingPower;\\r\\n\\r\\n        uint[] memory optionIndex = new uint[](1);\\r\\n        optionIndex[0] = index;\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](1);\\r\\n        optionVotes[0] = votingPower;\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: optionIndex,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        s.proposals[id].voters.push(voter);\\r\\n\\r\\n        // Update proposalsArray\\r\\n        int proposalIndex = getProposalIndex(id, s.proposalsArray);\\r\\n        require(\\r\\n            proposalIndex != -1,\\r\\n            \\\"Proposal cannot be found\\\"\\r\\n        );\\r\\n\\r\\n        delete s.proposalsArray[uint(proposalIndex)];\\r\\n\\r\\n        s.proposalsArray[uint(proposalIndex)] = s.proposals[id];\\r\\n\\r\\n        emit Vote(id, voter, s.proposals[id].options);\\r\\n        emit VoteCreated(\\r\\n            id,\\r\\n            optionVotes,\\r\\n            optionIndex,\\r\\n            msg.sender,\\r\\n            s.proposals[id].options\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function voteProposalByWeighing(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = s.proposals[id];\\r\\n\\r\\n        require(\\r\\n            proposal.proposalType == ProposalType.Weighted,\\r\\n            \\\"weighted voting not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"Voted already\\\");\\r\\n        require(\\r\\n            s.larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient VP\\\"\\r\\n        );\\r\\n        s.larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = s.proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            options[currentOptionIndex].vote += currentOptionVotingPower;\\r\\n        }\\r\\n\\r\\n        // Voter[] voters = proposal.voters\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: votingPower\\r\\n        });\\r\\n\\r\\n        s.proposals[id].voters.push(voter);\\r\\n\\r\\n        // Update proposalsArray\\r\\n        int proposalIndex = getProposalIndex(id, s.proposalsArray);\\r\\n        require(\\r\\n            proposalIndex != -1,\\r\\n            \\\"Proposal cannot be found\\\"\\r\\n        );\\r\\n\\r\\n        delete s.proposalsArray[uint(proposalIndex)];\\r\\n\\r\\n        s.proposalsArray[uint(proposalIndex)] = s.proposals[id];\\r\\n\\r\\n        emit Vote(id, voter, options);\\r\\n        emit VoteCreated(\\r\\n            id,\\r\\n            votingPower,\\r\\n            indexes,\\r\\n            msg.sender,\\r\\n            s.proposals[id].options\\r\\n        );\\r\\n    }\\r\\n\\r\\n     function getProposalIndex(\\r\\n        uint id,\\r\\n        Proposal[] memory proposalsArray\\r\\n    ) public pure returns (int256) {\\r\\n        for (uint i = 0; i < proposalsArray.length; i++) {\\r\\n            Proposal memory currentProposal = proposalsArray[i];\\r\\n            if (currentProposal.id == id) {\\r\\n                return int(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function getTotalVotingPower(\\r\\n        uint256[] memory votingPower\\r\\n    ) internal pure returns (uint256 totalVotingPower) {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingStatus(\\r\\n        uint256 id,\\r\\n        address voter\\r\\n    ) public view returns (int256) {\\r\\n        Voter[] memory voters = s.proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function getProposalsArray() external view returns (Proposal[] memory) {\\r\\n        return s.proposalsArray;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd920d53a70493c7a8808a4476e394ef5db1f8e6bfb9d280c5613d74b79194354\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n\\r\\n/*\\r\\n    export interface Proposal {\\r\\n        id: string;\\r\\n        creator: string;\\r\\n        description: string;\\r\\n        duration: number;\\r\\n        proposalStatus: string;\\r\\n        proposalType: string;\\r\\n        latestOptions: string[][] | undefined;\\r\\n        startDate: number;\\r\\n        endDate: number;\\r\\n        status: string;\\r\\n        timeLeft: number;\\r\\n        title: string;\\r\\n        optionsArray: {\\r\\n            optionIndex: string;\\r\\n            optionText: string;\\r\\n            optionVote: string;\\r\\n            optionPercentage: string;\\r\\n        }[];\\r\\n        validOptions: string[][];\\r\\n\\r\\n    }\\r\\n\\r\\n*/\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    \\r\\n  proposal1 = {\\r\\n      latestOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      optionsArray: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n      validOptions: [[optionIndex1, optionText1, optionVote1, optionPercentage1], [optionIndex2, optionText2, optionVote2, optionPercentage2]]\\r\\n\\r\\n\\r\\n  allProposals = [proposal1, proposal2, proposal3, e.t.c.]\\r\\n  \\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  Whenever someone votes, the proposalsArray has to be updated. The mapping to has to be updated\\r\\n    \\r\\n     */\\r\\n\\r\\n\\r\\n    \\r\\nstruct AppStorage {\\r\\n    uint256 totalSupply;\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(address => uint256)) allowances;\\r\\n    mapping(address => Counters.Counter) nonces;  \\r\\n\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    mapping(uint256 => Proposal) proposals;\\r\\n\\r\\n    uint256[] proposalsList;\\r\\n\\r\\n    Proposal[] proposalsArray;\\r\\n\\r\\n}\\r\\n\\r\\nlibrary LibAppStorage {\\r\\n    // diamondStorage() returns the position of the App storage struct in the diamond contract\\r\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\r\\n        assembly {\\r\\n            ds.slot := 0\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x52517385278120b75f5e500973c89f349c1ecb585afba7c2591ef592c9d2bfaf\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550614c4b806100286000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806350d2d30a1461005c57806397ae1535146100785780639a234175146100a8578063da12935c146100c4578063e6eccba2146100f4575b600080fd5b61007660048036038101906100719190613197565b610112565b005b610092600480360381019061008d91906138ae565b6112a1565b60405161009f9190613923565b60405180910390f35b6100c260048036038101906100bd919061393e565b611325565b005b6100de60048036038101906100d99190613991565b612538565b6040516100eb9190613923565b60405180910390f35b6100fc61275f565b6040516101099190613fb8565b60405180910390f35b600260005403610157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014e90614037565b60405180910390fd5b6002600081905550600061016a82612c3a565b905060006101788533612538565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461020e90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461023a90614086565b80156102875780601f1061025c57610100808354040283529160200191610287565b820191906000526020600020905b81548152906001019060200180831161026a57829003601f168201915b505050505081526020016003820180546102a090614086565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90614086565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561034757610346613a9a565b5b600281111561035957610358613a9a565b5b81526020016004820160019054906101000a900460ff16600281111561038257610381613a9a565b5b600281111561039457610393613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156104a957838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461040e90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461043a90614086565b80156104875780601f1061045c57610100808354040283529160200191610487565b820191906000526020600020905b81548152906001019060200180831161046a57829003601f168201915b50505050508152602001600282015481525050815260200190600101906103d1565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561060e57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561059e57602002820191906000526020600020905b81548152602001906001019080831161058a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156105f657602002820191906000526020600020905b8154815260200190600101908083116105e2575b505050505081525050815260200190600101906104d6565b505050508152505090506001600281111561062c5761062b613a9a565b5b8160800151600281111561064357610642613a9a565b5b14610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90614103565b60405180910390fd5b8060e001518160c001516106979190614152565b42106106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf906141d2565b60405180910390fd5b6000821261071b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107129061423e565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161077a919061426d565b602060405180830381865afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb919061429d565b10156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390614316565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161085e93929190614345565b6020604051808303816000875af115801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a191906143b4565b50600060016006016000888152602001908152602001600020600701905060005b86518110156109595760008782815181106108e0576108df6143e1565b5b6020026020010151905060008783815181106108ff576108fe6143e1565b5b602002602001015190508084838154811061091d5761091c6143e1565b5b9060005260206000209060030201600201600082825461093d9190614152565b925050819055505050808061095190614410565b9150506108c2565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610a35929190612c8c565b506040820151816002019080519060200190610a52929190612c8c565b5050506000610f34896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610f2b578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610b1490614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090614086565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b50505050508152602001600382018054610ba690614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd290614086565b8015610c1f5780601f10610bf457610100808354040283529160200191610c1f565b820191906000526020600020905b815481529060010190602001808311610c0257829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610c4d57610c4c613a9a565b5b6002811115610c5f57610c5e613a9a565b5b81526020016004820160019054906101000a900460ff166002811115610c8857610c87613a9a565b5b6002811115610c9a57610c99613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610daf578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610d1490614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4090614086565b8015610d8d5780601f10610d6257610100808354040283529160200191610d8d565b820191906000526020600020905b815481529060010190602001808311610d7057829003601f168201915b5050505050815260200160028201548152505081526020019060010190610cd7565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f1457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ea457602002820191906000526020600020905b815481526020019060010190808311610e90575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610efc57602002820191906000526020600020905b815481526020019060010190808311610ee8575b50505050508152505081526020019060010190610ddc565b505050508152505081526020019060010190610a80565b505050506112a1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8f906144a4565b60405180910390fd5b60016008018181548110610faf57610fae6143e1565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610ffd9190612cd9565b60038201600061100d9190612cd9565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110559190612d19565b6008820160006110659190612d3d565b5050600160060160008a815260200190815260200160002060016008018281548110611094576110936143e1565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816111279190614686565b506003820181600301908161113c9190614686565b506004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600281111561117557611174613a9a565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff021916908360028111156111b2576111b1613a9a565b5b0217905550600582015481600501556006820154816006015560078201816007019080546111e1929190612d61565b5060088201816008019080546111f8929190612de2565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e9289838560405161122f939291906149a7565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489888a33600160060160008f8152602001908152602001600020600701604051611286959493929190614afc565b60405180910390a15050505050506001600081905550505050565b600080600090505b82518110156112fa5760008382815181106112c7576112c66143e1565b5b60200260200101519050848160000151036112e657819250505061131f565b5080806112f290614410565b9150506112a9565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60026000540361136a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136190614037565b60405180910390fd5b6002600081905550600061137e8433612538565b905060006001600601600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461141490614086565b80601f016020809104026020016040519081016040528092919081815260200182805461144090614086565b801561148d5780601f106114625761010080835404028352916020019161148d565b820191906000526020600020905b81548152906001019060200180831161147057829003601f168201915b505050505081526020016003820180546114a690614086565b80601f01602080910402602001604051908101604052809291908181526020018280546114d290614086565b801561151f5780601f106114f45761010080835404028352916020019161151f565b820191906000526020600020905b81548152906001019060200180831161150257829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561154d5761154c613a9a565b5b600281111561155f5761155e613a9a565b5b81526020016004820160019054906101000a900460ff16600281111561158857611587613a9a565b5b600281111561159a57611599613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156116af57838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461161490614086565b80601f016020809104026020016040519081016040528092919081815260200182805461164090614086565b801561168d5780601f106116625761010080835404028352916020019161168d565b820191906000526020600020905b81548152906001019060200180831161167057829003601f168201915b50505050508152602001600282015481525050815260200190600101906115d7565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561181457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156117a457602002820191906000526020600020905b815481526020019060010190808311611790575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156117fc57602002820191906000526020600020905b8154815260200190600101908083116117e8575b505050505081525050815260200190600101906116dc565b505050508152505090506000600281111561183257611831613a9a565b5b8160800151600281111561184957611848613a9a565b5b14611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090614bb0565b60405180910390fd5b8060e001518160c0015161189d9190614152565b42106118de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d5906141d2565b60405180910390fd5b60008212611921576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189061423e565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611980919061426d565b602060405180830381865afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c1919061429d565b1015611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f990614316565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611a6493929190614345565b6020604051808303816000875af1158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa791906143b4565b5082600160060160008781526020019081526020016000206007018581548110611ad457611ad36143e1565b5b90600052602060002090600302016002016000828254611af49190614152565b925050819055506000600167ffffffffffffffff811115611b1857611b17613054565b5b604051908082528060200260200182016040528015611b465781602001602082028036833780820191505090505b5090508481600081518110611b5e57611b5d6143e1565b5b6020026020010181815250506000600167ffffffffffffffff811115611b8757611b86613054565b5b604051908082528060200260200182016040528015611bb55781602001602082028036833780820191505090505b5090508481600081518110611bcd57611bcc6143e1565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611cb4929190612c8c565b506040820151816002019080519060200190611cd1929190612c8c565b50505060006121b3896001600801805480602002602001604051908101604052809291908181526020016000905b828210156121aa578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611d9390614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611dbf90614086565b8015611e0c5780601f10611de157610100808354040283529160200191611e0c565b820191906000526020600020905b815481529060010190602001808311611def57829003601f168201915b50505050508152602001600382018054611e2590614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5190614086565b8015611e9e5780601f10611e7357610100808354040283529160200191611e9e565b820191906000526020600020905b815481529060010190602001808311611e8157829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611ecc57611ecb613a9a565b5b6002811115611ede57611edd613a9a565b5b81526020016004820160019054906101000a900460ff166002811115611f0757611f06613a9a565b5b6002811115611f1957611f18613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561202e578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611f9390614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611fbf90614086565b801561200c5780601f10611fe15761010080835404028352916020019161200c565b820191906000526020600020905b815481529060010190602001808311611fef57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611f56565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561219357838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561212357602002820191906000526020600020905b81548152602001906001019080831161210f575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561217b57602002820191906000526020600020905b815481526020019060010190808311612167575b5050505050815250508152602001906001019061205b565b505050508152505081526020019060010190611cff565b505050506112a1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103612217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220e906144a4565b60405180910390fd5b6001600801818154811061222e5761222d6143e1565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061227c9190612cd9565b60038201600061228c9190612cd9565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006122d49190612d19565b6008820160006122e49190612d3d565b5050600160060160008a815260200190815260200160002060016008018281548110612313576123126143e1565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816123a69190614686565b50600382018160030190816123bb9190614686565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360028111156123f4576123f3613a9a565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561243157612430613a9a565b5b021790555060058201548160050155600682015481600601556007820181600701908054612460929190612d61565b506008820181600801908054612477929190612de2565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d81526020019081526020016000206007016040516124c693929190614bd0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848633600160060160008f815260200190815260200160002060070160405161251d959493929190614afc565b60405180910390a15050505050506001600081905550505050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156126ac57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561263c57602002820191906000526020600020905b815481526020019060010190808311612628575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561269457602002820191906000526020600020905b815481526020019060010190808311612680575b50505050508152505081526020019060010190612574565b50505050905060005b81518110156127335760008282815181106126d3576126d26143e1565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361271f57819350505050612759565b50808061272b90614410565b9150506126b5565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b60606001600801805480602002602001604051908101604052809291908181526020016000905b82821015612c31578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461281a90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461284690614086565b80156128935780601f1061286857610100808354040283529160200191612893565b820191906000526020600020905b81548152906001019060200180831161287657829003601f168201915b505050505081526020016003820180546128ac90614086565b80601f01602080910402602001604051908101604052809291908181526020018280546128d890614086565b80156129255780601f106128fa57610100808354040283529160200191612925565b820191906000526020600020905b81548152906001019060200180831161290857829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561295357612952613a9a565b5b600281111561296557612964613a9a565b5b81526020016004820160019054906101000a900460ff16600281111561298e5761298d613a9a565b5b60028111156129a05761299f613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612ab5578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054612a1a90614086565b80601f0160208091040260200160405190810160405280929190818152602001828054612a4690614086565b8015612a935780601f10612a6857610100808354040283529160200191612a93565b820191906000526020600020905b815481529060010190602001808311612a7657829003601f168201915b50505050508152602001600282015481525050815260200190600101906129dd565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612c1a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015612baa57602002820191906000526020600020905b815481526020019060010190808311612b96575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612c0257602002820191906000526020600020905b815481526020019060010190808311612bee575b50505050508152505081526020019060010190612ae2565b505050508152505081526020019060010190612786565b50505050905090565b600080600090505b8251811015612c8657828181518110612c5e57612c5d6143e1565b5b602002602001015182612c719190614152565b91508080612c7e90614410565b915050612c42565b50919050565b828054828255906000526020600020908101928215612cc8579160200282015b82811115612cc7578251825591602001919060010190612cac565b5b509050612cd59190612ecf565b5090565b508054612ce590614086565b6000825580601f10612cf75750612d16565b601f016020900490600052602060002090810190612d159190612ecf565b5b50565b5080546000825560030290600052602060002090810190612d3a9190612eec565b50565b5080546000825560030290600052602060002090810190612d5e9190612f23565b50565b828054828255906000526020600020906003028101928215612dd15760005260206000209160030282015b82811115612dd05782826000820154816000015560018201816001019081612db49190614686565b5060028201548160020155505091600301919060030190612d8c565b5b509050612dde9190612eec565b5090565b828054828255906000526020600020906003028101928215612ebe5760005260206000209160030282015b82811115612ebd5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820181600101908054612e94929190612f81565b506002820181600201908054612eab929190612f81565b50505091600301919060030190612e0d565b5b509050612ecb9190612f23565b5090565b5b80821115612ee8576000816000905550600101612ed0565b5090565b5b80821115612f1f57600080820160009055600182016000612f0e9190612cd9565b600282016000905550600301612eed565b5090565b5b80821115612f7d57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000612f649190612fd3565b600282016000612f749190612fd3565b50600301612f24565b5090565b828054828255906000526020600020908101928215612fc25760005260206000209182015b82811115612fc1578254825591600101919060010190612fa6565b5b509050612fcf9190612ecf565b5090565b5080546000825590600052602060002090810190612ff19190612ecf565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61301b81613008565b811461302657600080fd5b50565b60008135905061303881613012565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61308c82613043565b810181811067ffffffffffffffff821117156130ab576130aa613054565b5b80604052505050565b60006130be612ff4565b90506130ca8282613083565b919050565b600067ffffffffffffffff8211156130ea576130e9613054565b5b602082029050602081019050919050565b600080fd5b600061311361310e846130cf565b6130b4565b90508083825260208201905060208402830185811115613136576131356130fb565b5b835b8181101561315f578061314b8882613029565b845260208401935050602081019050613138565b5050509392505050565b600082601f83011261317e5761317d61303e565b5b813561318e848260208601613100565b91505092915050565b6000806000606084860312156131b0576131af612ffe565b5b60006131be86828701613029565b935050602084013567ffffffffffffffff8111156131df576131de613003565b5b6131eb86828701613169565b925050604084013567ffffffffffffffff81111561320c5761320b613003565b5b61321886828701613169565b9150509250925092565b600067ffffffffffffffff82111561323d5761323c613054565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328382613258565b9050919050565b61329381613278565b811461329e57600080fd5b50565b6000813590506132b08161328a565b92915050565b600080fd5b600067ffffffffffffffff8211156132d6576132d5613054565b5b6132df82613043565b9050602081019050919050565b82818337600083830152505050565b600061330e613309846132bb565b6130b4565b90508281526020810184848401111561332a576133296132b6565b5b6133358482856132ec565b509392505050565b600082601f8301126133525761335161303e565b5b81356133628482602086016132fb565b91505092915050565b6003811061337857600080fd5b50565b60008135905061338a8161336b565b92915050565b6003811061339d57600080fd5b50565b6000813590506133af81613390565b92915050565b600067ffffffffffffffff8211156133d0576133cf613054565b5b602082029050602081019050919050565b6000606082840312156133f7576133f661324e565b5b61340160606130b4565b9050600061341184828501613029565b600083015250602082013567ffffffffffffffff81111561343557613434613253565b5b6134418482850161333d565b602083015250604061345584828501613029565b60408301525092915050565b600061347461346f846133b5565b6130b4565b90508083825260208201905060208402830185811115613497576134966130fb565b5b835b818110156134de57803567ffffffffffffffff8111156134bc576134bb61303e565b5b8086016134c989826133e1565b85526020850194505050602081019050613499565b5050509392505050565b600082601f8301126134fd576134fc61303e565b5b813561350d848260208601613461565b91505092915050565b600067ffffffffffffffff82111561353157613530613054565b5b602082029050602081019050919050565b6000606082840312156135585761355761324e565b5b61356260606130b4565b90506000613572848285016132a1565b600083015250602082013567ffffffffffffffff81111561359657613595613253565b5b6135a284828501613169565b602083015250604082013567ffffffffffffffff8111156135c6576135c5613253565b5b6135d284828501613169565b60408301525092915050565b60006135f16135ec84613516565b6130b4565b90508083825260208201905060208402830185811115613614576136136130fb565b5b835b8181101561365b57803567ffffffffffffffff8111156136395761363861303e565b5b8086016136468982613542565b85526020850194505050602081019050613616565b5050509392505050565b600082601f83011261367a5761367961303e565b5b813561368a8482602086016135de565b91505092915050565b600061014082840312156136aa576136a961324e565b5b6136b56101406130b4565b905060006136c584828501613029565b60008301525060206136d9848285016132a1565b602083015250604082013567ffffffffffffffff8111156136fd576136fc613253565b5b6137098482850161333d565b604083015250606082013567ffffffffffffffff81111561372d5761372c613253565b5b6137398482850161333d565b606083015250608061374d8482850161337b565b60808301525060a0613761848285016133a0565b60a08301525060c061377584828501613029565b60c08301525060e061378984828501613029565b60e08301525061010082013567ffffffffffffffff8111156137ae576137ad613253565b5b6137ba848285016134e8565b6101008301525061012082013567ffffffffffffffff8111156137e0576137df613253565b5b6137ec84828501613665565b6101208301525092915050565b600061380c61380784613222565b6130b4565b9050808382526020820190506020840283018581111561382f5761382e6130fb565b5b835b8181101561387657803567ffffffffffffffff8111156138545761385361303e565b5b8086016138618982613693565b85526020850194505050602081019050613831565b5050509392505050565b600082601f8301126138955761389461303e565b5b81356138a58482602086016137f9565b91505092915050565b600080604083850312156138c5576138c4612ffe565b5b60006138d385828601613029565b925050602083013567ffffffffffffffff8111156138f4576138f3613003565b5b61390085828601613880565b9150509250929050565b6000819050919050565b61391d8161390a565b82525050565b60006020820190506139386000830184613914565b92915050565b60008060006060848603121561395757613956612ffe565b5b600061396586828701613029565b935050602061397686828701613029565b925050604061398786828701613029565b9150509250925092565b600080604083850312156139a8576139a7612ffe565b5b60006139b685828601613029565b92505060206139c7858286016132a1565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a0681613008565b82525050565b613a1581613278565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a55578082015181840152602081019050613a3a565b60008484015250505050565b6000613a6c82613a1b565b613a768185613a26565b9350613a86818560208601613a37565b613a8f81613043565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613ada57613ad9613a9a565b5b50565b6000819050613aeb82613ac9565b919050565b6000613afb82613add565b9050919050565b613b0b81613af0565b82525050565b60038110613b2257613b21613a9a565b5b50565b6000819050613b3382613b11565b919050565b6000613b4382613b25565b9050919050565b613b5381613b38565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000606083016000830151613b9d60008601826139fd565b5060208301518482036020860152613bb58282613a61565b9150506040830151613bca60408601826139fd565b508091505092915050565b6000613be18383613b85565b905092915050565b6000602082019050919050565b6000613c0182613b59565b613c0b8185613b64565b935083602082028501613c1d85613b75565b8060005b85811015613c595784840389528151613c3a8582613bd5565b9450613c4583613be9565b925060208a01995050600181019050613c21565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613ccf83836139fd565b60208301905092915050565b6000602082019050919050565b6000613cf382613c97565b613cfd8185613ca2565b9350613d0883613cb3565b8060005b83811015613d39578151613d208882613cc3565b9750613d2b83613cdb565b925050600181019050613d0c565b5085935050505092915050565b6000606083016000830151613d5e6000860182613a0c565b5060208301518482036020860152613d768282613ce8565b91505060408301518482036040860152613d908282613ce8565b9150508091505092915050565b6000613da98383613d46565b905092915050565b6000602082019050919050565b6000613dc982613c6b565b613dd38185613c76565b935083602082028501613de585613c87565b8060005b85811015613e215784840389528151613e028582613d9d565b9450613e0d83613db1565b925060208a01995050600181019050613de9565b50829750879550505050505092915050565b600061014083016000830151613e4c60008601826139fd565b506020830151613e5f6020860182613a0c565b5060408301518482036040860152613e778282613a61565b91505060608301518482036060860152613e918282613a61565b9150506080830151613ea66080860182613b02565b5060a0830151613eb960a0860182613b4a565b5060c0830151613ecc60c08601826139fd565b5060e0830151613edf60e08601826139fd565b50610100830151848203610100860152613ef98282613bf6565b915050610120830151848203610120860152613f158282613dbe565b9150508091505092915050565b6000613f2e8383613e33565b905092915050565b6000602082019050919050565b6000613f4e826139d1565b613f5881856139dc565b935083602082028501613f6a856139ed565b8060005b85811015613fa65784840389528151613f878582613f22565b9450613f9283613f36565b925060208a01995050600181019050613f6e565b50829750879550505050505092915050565b60006020820190508181036000830152613fd28184613f43565b905092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614021601f83613fda565b915061402c82613feb565b602082019050919050565b6000602082019050818103600083015261405081614014565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061409e57607f821691505b6020821081036140b1576140b0614057565b5b50919050565b7f776569676874656420766f74696e67206e6f7420616c6c6f7765640000000000600082015250565b60006140ed601b83613fda565b91506140f8826140b7565b602082019050919050565b6000602082019050818103600083015261411c816140e0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061415d82613008565b915061416883613008565b92508282019050808211156141805761417f614123565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b60006141bc600f83613fda565b91506141c782614186565b602082019050919050565b600060208201905081810360008301526141eb816141af565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b6000614228600d83613fda565b9150614233826141f2565b602082019050919050565b600060208201905081810360008301526142578161421b565b9050919050565b61426781613278565b82525050565b6000602082019050614282600083018461425e565b92915050565b60008151905061429781613012565b92915050565b6000602082840312156142b3576142b2612ffe565b5b60006142c184828501614288565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b6000614300600f83613fda565b915061430b826142ca565b602082019050919050565b6000602082019050818103600083015261432f816142f3565b9050919050565b61433f81613008565b82525050565b600060608201905061435a600083018661425e565b614367602083018561425e565b6143746040830184614336565b949350505050565b60008115159050919050565b6143918161437c565b811461439c57600080fd5b50565b6000815190506143ae81614388565b92915050565b6000602082840312156143ca576143c9612ffe565b5b60006143d88482850161439f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061441b82613008565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361444d5761444c614123565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b600061448e601883613fda565b915061449982614458565b602082019050919050565b600060208201905081810360008301526144bd81614481565b9050919050565b6000815490506144d381614086565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261453c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826144ff565b61454686836144ff565b95508019841693508086168417925050509392505050565b6000819050919050565b600061458361457e61457984613008565b61455e565b613008565b9050919050565b6000819050919050565b61459d83614568565b6145b16145a98261458a565b84845461450c565b825550505050565b600090565b6145c66145b9565b6145d1818484614594565b505050565b5b818110156145f5576145ea6000826145be565b6001810190506145d7565b5050565b601f82111561463a5761460b816144da565b614614846144ef565b81016020851015614623578190505b61463761462f856144ef565b8301826145d6565b50505b505050565b600082821c905092915050565b600061465d6000198460080261463f565b1980831691505092915050565b6000614676838361464c565b9150826002028217905092915050565b81810361469457505061476c565b61469d826144c4565b67ffffffffffffffff8111156146b6576146b5613054565b5b6146c08254614086565b6146cb8282856145f9565b6000601f8311600181146146fa57600084156146e8578287015490505b6146f2858261466a565b865550614765565b601f198416614708876144da565b9650614713866144da565b60005b8281101561473b57848901548255600182019150600185019450602081019050614716565b868310156147585784890154614754601f89168261464c565b8355505b6001600288020188555050505b5050505050505b565b60006060830160008301516147866000860182613a0c565b506020830151848203602086015261479e8282613ce8565b915050604083015184820360408601526147b88282613ce8565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b600061482061481b836147f6565b614803565b9050919050565b6000815461483481614086565b61483e8186613a26565b94506001821660008114614859576001811461486f576148a2565b60ff1983168652811515602002860193506148a2565b614878856144da565b60005b8381101561489a5781548189015260018201915060208101905061487b565b808801955050505b50505092915050565b60006060830160008084015490506148c28161480d565b6148cf60008701826139fd565b506001840185830360208701526148e68382614827565b925050600284015490506148f98161480d565b61490660408701826139fd565b50819250505092915050565b600061491e83836148ab565b905092915050565b6000600382019050919050565b600061493e826147c5565b61494881856147d0565b93508360208202850161495a856147e1565b8060005b85811015614995578484038952816149768582614912565b945061498183614926565b925060208a0199505060018101905061495e565b50829750879550505050505092915050565b60006060820190506149bc6000830186614336565b81810360208301526149ce818561476e565b905081810360408301526149e28184614933565b9050949350505050565b600082825260208201905092915050565b6000614a0882613c97565b614a1281856149ec565b9350614a1d83613cb3565b8060005b83811015614a4e578151614a358882613cc3565b9750614a4083613cdb565b925050600181019050614a21565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b6000614a9382614a5b565b614a9d81856147d0565b935083602082028501614aaf85614a66565b8060005b85811015614aea57848403895281614acb8582614912565b9450614ad683614a7b565b925060208a01995050600181019050614ab3565b50829750879550505050505092915050565b600060a082019050614b116000830188614336565b8181036020830152614b2381876149fd565b90508181036040830152614b3781866149fd565b9050614b46606083018561425e565b8181036080830152614b588184614a88565b90509695505050505050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f776564600082015250565b6000614b9a602083613fda565b9150614ba582614b64565b602082019050919050565b60006020820190508181036000830152614bc981614b8d565b9050919050565b6000606082019050614be56000830186614336565b8181036020830152614bf7818561476e565b90508181036040830152614c0b8184614a88565b905094935050505056fea2646970667358221220e8b2a8f962c0d837d7ea91cdaf5e21f87e6cb271201d1663171267243e96e71f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806350d2d30a1461005c57806397ae1535146100785780639a234175146100a8578063da12935c146100c4578063e6eccba2146100f4575b600080fd5b61007660048036038101906100719190613197565b610112565b005b610092600480360381019061008d91906138ae565b6112a1565b60405161009f9190613923565b60405180910390f35b6100c260048036038101906100bd919061393e565b611325565b005b6100de60048036038101906100d99190613991565b612538565b6040516100eb9190613923565b60405180910390f35b6100fc61275f565b6040516101099190613fb8565b60405180910390f35b600260005403610157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014e90614037565b60405180910390fd5b6002600081905550600061016a82612c3a565b905060006101788533612538565b905060006001600601600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461020e90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461023a90614086565b80156102875780601f1061025c57610100808354040283529160200191610287565b820191906000526020600020905b81548152906001019060200180831161026a57829003601f168201915b505050505081526020016003820180546102a090614086565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90614086565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561034757610346613a9a565b5b600281111561035957610358613a9a565b5b81526020016004820160019054906101000a900460ff16600281111561038257610381613a9a565b5b600281111561039457610393613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156104a957838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461040e90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461043a90614086565b80156104875780601f1061045c57610100808354040283529160200191610487565b820191906000526020600020905b81548152906001019060200180831161046a57829003601f168201915b50505050508152602001600282015481525050815260200190600101906103d1565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561060e57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561059e57602002820191906000526020600020905b81548152602001906001019080831161058a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156105f657602002820191906000526020600020905b8154815260200190600101908083116105e2575b505050505081525050815260200190600101906104d6565b505050508152505090506001600281111561062c5761062b613a9a565b5b8160800151600281111561064357610642613a9a565b5b14610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90614103565b60405180910390fd5b8060e001518160c001516106979190614152565b42106106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf906141d2565b60405180910390fd5b6000821261071b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107129061423e565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161077a919061426d565b602060405180830381865afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb919061429d565b10156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390614316565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161085e93929190614345565b6020604051808303816000875af115801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a191906143b4565b50600060016006016000888152602001908152602001600020600701905060005b86518110156109595760008782815181106108e0576108df6143e1565b5b6020026020010151905060008783815181106108ff576108fe6143e1565b5b602002602001015190508084838154811061091d5761091c6143e1565b5b9060005260206000209060030201600201600082825461093d9190614152565b925050819055505050808061095190614410565b9150506108c2565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610a35929190612c8c565b506040820151816002019080519060200190610a52929190612c8c565b5050506000610f34896001600801805480602002602001604051908101604052809291908181526020016000905b82821015610f2b578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610b1490614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090614086565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b50505050508152602001600382018054610ba690614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd290614086565b8015610c1f5780601f10610bf457610100808354040283529160200191610c1f565b820191906000526020600020905b815481529060010190602001808311610c0257829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610c4d57610c4c613a9a565b5b6002811115610c5f57610c5e613a9a565b5b81526020016004820160019054906101000a900460ff166002811115610c8857610c87613a9a565b5b6002811115610c9a57610c99613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610daf578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054610d1490614086565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4090614086565b8015610d8d5780601f10610d6257610100808354040283529160200191610d8d565b820191906000526020600020905b815481529060010190602001808311610d7057829003601f168201915b5050505050815260200160028201548152505081526020019060010190610cd7565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f1457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ea457602002820191906000526020600020905b815481526020019060010190808311610e90575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610efc57602002820191906000526020600020905b815481526020019060010190808311610ee8575b50505050508152505081526020019060010190610ddc565b505050508152505081526020019060010190610a80565b505050506112a1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8f906144a4565b60405180910390fd5b60016008018181548110610faf57610fae6143e1565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610ffd9190612cd9565b60038201600061100d9190612cd9565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006110559190612d19565b6008820160006110659190612d3d565b5050600160060160008a815260200190815260200160002060016008018281548110611094576110936143e1565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816111279190614686565b506003820181600301908161113c9190614686565b506004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083600281111561117557611174613a9a565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff021916908360028111156111b2576111b1613a9a565b5b0217905550600582015481600501556006820154816006015560078201816007019080546111e1929190612d61565b5060088201816008019080546111f8929190612de2565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e9289838560405161122f939291906149a7565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489888a33600160060160008f8152602001908152602001600020600701604051611286959493929190614afc565b60405180910390a15050505050506001600081905550505050565b600080600090505b82518110156112fa5760008382815181106112c7576112c66143e1565b5b60200260200101519050848160000151036112e657819250505061131f565b5080806112f290614410565b9150506112a9565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60026000540361136a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136190614037565b60405180910390fd5b6002600081905550600061137e8433612538565b905060006001600601600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461141490614086565b80601f016020809104026020016040519081016040528092919081815260200182805461144090614086565b801561148d5780601f106114625761010080835404028352916020019161148d565b820191906000526020600020905b81548152906001019060200180831161147057829003601f168201915b505050505081526020016003820180546114a690614086565b80601f01602080910402602001604051908101604052809291908181526020018280546114d290614086565b801561151f5780601f106114f45761010080835404028352916020019161151f565b820191906000526020600020905b81548152906001019060200180831161150257829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561154d5761154c613a9a565b5b600281111561155f5761155e613a9a565b5b81526020016004820160019054906101000a900460ff16600281111561158857611587613a9a565b5b600281111561159a57611599613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156116af57838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461161490614086565b80601f016020809104026020016040519081016040528092919081815260200182805461164090614086565b801561168d5780601f106116625761010080835404028352916020019161168d565b820191906000526020600020905b81548152906001019060200180831161167057829003601f168201915b50505050508152602001600282015481525050815260200190600101906115d7565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561181457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156117a457602002820191906000526020600020905b815481526020019060010190808311611790575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156117fc57602002820191906000526020600020905b8154815260200190600101908083116117e8575b505050505081525050815260200190600101906116dc565b505050508152505090506000600281111561183257611831613a9a565b5b8160800151600281111561184957611848613a9a565b5b14611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090614bb0565b60405180910390fd5b8060e001518160c0015161189d9190614152565b42106118de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d5906141d2565b60405180910390fd5b60008212611921576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189061423e565b60405180910390fd5b82600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611980919061426d565b602060405180830381865afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c1919061429d565b1015611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f990614316565b60405180910390fd5b600160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611a6493929190614345565b6020604051808303816000875af1158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa791906143b4565b5082600160060160008781526020019081526020016000206007018581548110611ad457611ad36143e1565b5b90600052602060002090600302016002016000828254611af49190614152565b925050819055506000600167ffffffffffffffff811115611b1857611b17613054565b5b604051908082528060200260200182016040528015611b465781602001602082028036833780820191505090505b5090508481600081518110611b5e57611b5d6143e1565b5b6020026020010181815250506000600167ffffffffffffffff811115611b8757611b86613054565b5b604051908082528060200260200182016040528015611bb55781602001602082028036833780820191505090505b5090508481600081518110611bcd57611bcc6143e1565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506001600601600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611cb4929190612c8c565b506040820151816002019080519060200190611cd1929190612c8c565b50505060006121b3896001600801805480602002602001604051908101604052809291908181526020016000905b828210156121aa578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611d9390614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611dbf90614086565b8015611e0c5780601f10611de157610100808354040283529160200191611e0c565b820191906000526020600020905b815481529060010190602001808311611def57829003601f168201915b50505050508152602001600382018054611e2590614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5190614086565b8015611e9e5780601f10611e7357610100808354040283529160200191611e9e565b820191906000526020600020905b815481529060010190602001808311611e8157829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611ecc57611ecb613a9a565b5b6002811115611ede57611edd613a9a565b5b81526020016004820160019054906101000a900460ff166002811115611f0757611f06613a9a565b5b6002811115611f1957611f18613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561202e578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611f9390614086565b80601f0160208091040260200160405190810160405280929190818152602001828054611fbf90614086565b801561200c5780601f10611fe15761010080835404028352916020019161200c565b820191906000526020600020905b815481529060010190602001808311611fef57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611f56565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561219357838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561212357602002820191906000526020600020905b81548152602001906001019080831161210f575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561217b57602002820191906000526020600020905b815481526020019060010190808311612167575b5050505050815250508152602001906001019061205b565b505050508152505081526020019060010190611cff565b505050506112a1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103612217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220e906144a4565b60405180910390fd5b6001600801818154811061222e5761222d6143e1565b5b90600052602060002090600902016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600061227c9190612cd9565b60038201600061228c9190612cd9565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff0219169055600582016000905560068201600090556007820160006122d49190612d19565b6008820160006122e49190612d3d565b5050600160060160008a815260200190815260200160002060016008018281548110612313576123126143e1565b5b9060005260206000209060090201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282018160020190816123a69190614686565b50600382018160030190816123bb9190614686565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360028111156123f4576123f3613a9a565b5b02179055506004820160019054906101000a900460ff168160040160016101000a81548160ff0219169083600281111561243157612430613a9a565b5b021790555060058201548160050155600682015481600601556007820181600701908054612460929190612d61565b506008820181600801908054612477929190612de2565b509050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928983600160060160008d81526020019081526020016000206007016040516124c693929190614bd0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489848633600160060160008f815260200190815260200160002060070160405161251d959493929190614afc565b60405180910390a15050505050506001600081905550505050565b60008060016006016000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156126ac57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561263c57602002820191906000526020600020905b815481526020019060010190808311612628575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561269457602002820191906000526020600020905b815481526020019060010190808311612680575b50505050508152505081526020019060010190612574565b50505050905060005b81518110156127335760008282815181106126d3576126d26143e1565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361271f57819350505050612759565b50808061272b90614410565b9150506126b5565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b60606001600801805480602002602001604051908101604052809291908181526020016000905b82821015612c31578382906000526020600020906009020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461281a90614086565b80601f016020809104026020016040519081016040528092919081815260200182805461284690614086565b80156128935780601f1061286857610100808354040283529160200191612893565b820191906000526020600020905b81548152906001019060200180831161287657829003601f168201915b505050505081526020016003820180546128ac90614086565b80601f01602080910402602001604051908101604052809291908181526020018280546128d890614086565b80156129255780601f106128fa57610100808354040283529160200191612925565b820191906000526020600020905b81548152906001019060200180831161290857829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561295357612952613a9a565b5b600281111561296557612964613a9a565b5b81526020016004820160019054906101000a900460ff16600281111561298e5761298d613a9a565b5b60028111156129a05761299f613a9a565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612ab5578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054612a1a90614086565b80601f0160208091040260200160405190810160405280929190818152602001828054612a4690614086565b8015612a935780601f10612a6857610100808354040283529160200191612a93565b820191906000526020600020905b815481529060010190602001808311612a7657829003601f168201915b50505050508152602001600282015481525050815260200190600101906129dd565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612c1a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015612baa57602002820191906000526020600020905b815481526020019060010190808311612b96575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612c0257602002820191906000526020600020905b815481526020019060010190808311612bee575b50505050508152505081526020019060010190612ae2565b505050508152505081526020019060010190612786565b50505050905090565b600080600090505b8251811015612c8657828181518110612c5e57612c5d6143e1565b5b602002602001015182612c719190614152565b91508080612c7e90614410565b915050612c42565b50919050565b828054828255906000526020600020908101928215612cc8579160200282015b82811115612cc7578251825591602001919060010190612cac565b5b509050612cd59190612ecf565b5090565b508054612ce590614086565b6000825580601f10612cf75750612d16565b601f016020900490600052602060002090810190612d159190612ecf565b5b50565b5080546000825560030290600052602060002090810190612d3a9190612eec565b50565b5080546000825560030290600052602060002090810190612d5e9190612f23565b50565b828054828255906000526020600020906003028101928215612dd15760005260206000209160030282015b82811115612dd05782826000820154816000015560018201816001019081612db49190614686565b5060028201548160020155505091600301919060030190612d8c565b5b509050612dde9190612eec565b5090565b828054828255906000526020600020906003028101928215612ebe5760005260206000209160030282015b82811115612ebd5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820181600101908054612e94929190612f81565b506002820181600201908054612eab929190612f81565b50505091600301919060030190612e0d565b5b509050612ecb9190612f23565b5090565b5b80821115612ee8576000816000905550600101612ed0565b5090565b5b80821115612f1f57600080820160009055600182016000612f0e9190612cd9565b600282016000905550600301612eed565b5090565b5b80821115612f7d57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000612f649190612fd3565b600282016000612f749190612fd3565b50600301612f24565b5090565b828054828255906000526020600020908101928215612fc25760005260206000209182015b82811115612fc1578254825591600101919060010190612fa6565b5b509050612fcf9190612ecf565b5090565b5080546000825590600052602060002090810190612ff19190612ecf565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61301b81613008565b811461302657600080fd5b50565b60008135905061303881613012565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61308c82613043565b810181811067ffffffffffffffff821117156130ab576130aa613054565b5b80604052505050565b60006130be612ff4565b90506130ca8282613083565b919050565b600067ffffffffffffffff8211156130ea576130e9613054565b5b602082029050602081019050919050565b600080fd5b600061311361310e846130cf565b6130b4565b90508083825260208201905060208402830185811115613136576131356130fb565b5b835b8181101561315f578061314b8882613029565b845260208401935050602081019050613138565b5050509392505050565b600082601f83011261317e5761317d61303e565b5b813561318e848260208601613100565b91505092915050565b6000806000606084860312156131b0576131af612ffe565b5b60006131be86828701613029565b935050602084013567ffffffffffffffff8111156131df576131de613003565b5b6131eb86828701613169565b925050604084013567ffffffffffffffff81111561320c5761320b613003565b5b61321886828701613169565b9150509250925092565b600067ffffffffffffffff82111561323d5761323c613054565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328382613258565b9050919050565b61329381613278565b811461329e57600080fd5b50565b6000813590506132b08161328a565b92915050565b600080fd5b600067ffffffffffffffff8211156132d6576132d5613054565b5b6132df82613043565b9050602081019050919050565b82818337600083830152505050565b600061330e613309846132bb565b6130b4565b90508281526020810184848401111561332a576133296132b6565b5b6133358482856132ec565b509392505050565b600082601f8301126133525761335161303e565b5b81356133628482602086016132fb565b91505092915050565b6003811061337857600080fd5b50565b60008135905061338a8161336b565b92915050565b6003811061339d57600080fd5b50565b6000813590506133af81613390565b92915050565b600067ffffffffffffffff8211156133d0576133cf613054565b5b602082029050602081019050919050565b6000606082840312156133f7576133f661324e565b5b61340160606130b4565b9050600061341184828501613029565b600083015250602082013567ffffffffffffffff81111561343557613434613253565b5b6134418482850161333d565b602083015250604061345584828501613029565b60408301525092915050565b600061347461346f846133b5565b6130b4565b90508083825260208201905060208402830185811115613497576134966130fb565b5b835b818110156134de57803567ffffffffffffffff8111156134bc576134bb61303e565b5b8086016134c989826133e1565b85526020850194505050602081019050613499565b5050509392505050565b600082601f8301126134fd576134fc61303e565b5b813561350d848260208601613461565b91505092915050565b600067ffffffffffffffff82111561353157613530613054565b5b602082029050602081019050919050565b6000606082840312156135585761355761324e565b5b61356260606130b4565b90506000613572848285016132a1565b600083015250602082013567ffffffffffffffff81111561359657613595613253565b5b6135a284828501613169565b602083015250604082013567ffffffffffffffff8111156135c6576135c5613253565b5b6135d284828501613169565b60408301525092915050565b60006135f16135ec84613516565b6130b4565b90508083825260208201905060208402830185811115613614576136136130fb565b5b835b8181101561365b57803567ffffffffffffffff8111156136395761363861303e565b5b8086016136468982613542565b85526020850194505050602081019050613616565b5050509392505050565b600082601f83011261367a5761367961303e565b5b813561368a8482602086016135de565b91505092915050565b600061014082840312156136aa576136a961324e565b5b6136b56101406130b4565b905060006136c584828501613029565b60008301525060206136d9848285016132a1565b602083015250604082013567ffffffffffffffff8111156136fd576136fc613253565b5b6137098482850161333d565b604083015250606082013567ffffffffffffffff81111561372d5761372c613253565b5b6137398482850161333d565b606083015250608061374d8482850161337b565b60808301525060a0613761848285016133a0565b60a08301525060c061377584828501613029565b60c08301525060e061378984828501613029565b60e08301525061010082013567ffffffffffffffff8111156137ae576137ad613253565b5b6137ba848285016134e8565b6101008301525061012082013567ffffffffffffffff8111156137e0576137df613253565b5b6137ec84828501613665565b6101208301525092915050565b600061380c61380784613222565b6130b4565b9050808382526020820190506020840283018581111561382f5761382e6130fb565b5b835b8181101561387657803567ffffffffffffffff8111156138545761385361303e565b5b8086016138618982613693565b85526020850194505050602081019050613831565b5050509392505050565b600082601f8301126138955761389461303e565b5b81356138a58482602086016137f9565b91505092915050565b600080604083850312156138c5576138c4612ffe565b5b60006138d385828601613029565b925050602083013567ffffffffffffffff8111156138f4576138f3613003565b5b61390085828601613880565b9150509250929050565b6000819050919050565b61391d8161390a565b82525050565b60006020820190506139386000830184613914565b92915050565b60008060006060848603121561395757613956612ffe565b5b600061396586828701613029565b935050602061397686828701613029565b925050604061398786828701613029565b9150509250925092565b600080604083850312156139a8576139a7612ffe565b5b60006139b685828601613029565b92505060206139c7858286016132a1565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a0681613008565b82525050565b613a1581613278565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a55578082015181840152602081019050613a3a565b60008484015250505050565b6000613a6c82613a1b565b613a768185613a26565b9350613a86818560208601613a37565b613a8f81613043565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613ada57613ad9613a9a565b5b50565b6000819050613aeb82613ac9565b919050565b6000613afb82613add565b9050919050565b613b0b81613af0565b82525050565b60038110613b2257613b21613a9a565b5b50565b6000819050613b3382613b11565b919050565b6000613b4382613b25565b9050919050565b613b5381613b38565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000606083016000830151613b9d60008601826139fd565b5060208301518482036020860152613bb58282613a61565b9150506040830151613bca60408601826139fd565b508091505092915050565b6000613be18383613b85565b905092915050565b6000602082019050919050565b6000613c0182613b59565b613c0b8185613b64565b935083602082028501613c1d85613b75565b8060005b85811015613c595784840389528151613c3a8582613bd5565b9450613c4583613be9565b925060208a01995050600181019050613c21565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613ccf83836139fd565b60208301905092915050565b6000602082019050919050565b6000613cf382613c97565b613cfd8185613ca2565b9350613d0883613cb3565b8060005b83811015613d39578151613d208882613cc3565b9750613d2b83613cdb565b925050600181019050613d0c565b5085935050505092915050565b6000606083016000830151613d5e6000860182613a0c565b5060208301518482036020860152613d768282613ce8565b91505060408301518482036040860152613d908282613ce8565b9150508091505092915050565b6000613da98383613d46565b905092915050565b6000602082019050919050565b6000613dc982613c6b565b613dd38185613c76565b935083602082028501613de585613c87565b8060005b85811015613e215784840389528151613e028582613d9d565b9450613e0d83613db1565b925060208a01995050600181019050613de9565b50829750879550505050505092915050565b600061014083016000830151613e4c60008601826139fd565b506020830151613e5f6020860182613a0c565b5060408301518482036040860152613e778282613a61565b91505060608301518482036060860152613e918282613a61565b9150506080830151613ea66080860182613b02565b5060a0830151613eb960a0860182613b4a565b5060c0830151613ecc60c08601826139fd565b5060e0830151613edf60e08601826139fd565b50610100830151848203610100860152613ef98282613bf6565b915050610120830151848203610120860152613f158282613dbe565b9150508091505092915050565b6000613f2e8383613e33565b905092915050565b6000602082019050919050565b6000613f4e826139d1565b613f5881856139dc565b935083602082028501613f6a856139ed565b8060005b85811015613fa65784840389528151613f878582613f22565b9450613f9283613f36565b925060208a01995050600181019050613f6e565b50829750879550505050505092915050565b60006020820190508181036000830152613fd28184613f43565b905092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614021601f83613fda565b915061402c82613feb565b602082019050919050565b6000602082019050818103600083015261405081614014565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061409e57607f821691505b6020821081036140b1576140b0614057565b5b50919050565b7f776569676874656420766f74696e67206e6f7420616c6c6f7765640000000000600082015250565b60006140ed601b83613fda565b91506140f8826140b7565b602082019050919050565b6000602082019050818103600083015261411c816140e0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061415d82613008565b915061416883613008565b92508282019050808211156141805761417f614123565b5b92915050565b7f50726f706f73616c20636c6f7365640000000000000000000000000000000000600082015250565b60006141bc600f83613fda565b91506141c782614186565b602082019050919050565b600060208201905081810360008301526141eb816141af565b9050919050565b7f566f74656420616c726561647900000000000000000000000000000000000000600082015250565b6000614228600d83613fda565b9150614233826141f2565b602082019050919050565b600060208201905081810360008301526142578161421b565b9050919050565b61426781613278565b82525050565b6000602082019050614282600083018461425e565b92915050565b60008151905061429781613012565b92915050565b6000602082840312156142b3576142b2612ffe565b5b60006142c184828501614288565b91505092915050565b7f496e73756666696369656e742056500000000000000000000000000000000000600082015250565b6000614300600f83613fda565b915061430b826142ca565b602082019050919050565b6000602082019050818103600083015261432f816142f3565b9050919050565b61433f81613008565b82525050565b600060608201905061435a600083018661425e565b614367602083018561425e565b6143746040830184614336565b949350505050565b60008115159050919050565b6143918161437c565b811461439c57600080fd5b50565b6000815190506143ae81614388565b92915050565b6000602082840312156143ca576143c9612ffe565b5b60006143d88482850161439f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061441b82613008565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361444d5761444c614123565b5b600182019050919050565b7f50726f706f73616c2063616e6e6f7420626520666f756e640000000000000000600082015250565b600061448e601883613fda565b915061449982614458565b602082019050919050565b600060208201905081810360008301526144bd81614481565b9050919050565b6000815490506144d381614086565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261453c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826144ff565b61454686836144ff565b95508019841693508086168417925050509392505050565b6000819050919050565b600061458361457e61457984613008565b61455e565b613008565b9050919050565b6000819050919050565b61459d83614568565b6145b16145a98261458a565b84845461450c565b825550505050565b600090565b6145c66145b9565b6145d1818484614594565b505050565b5b818110156145f5576145ea6000826145be565b6001810190506145d7565b5050565b601f82111561463a5761460b816144da565b614614846144ef565b81016020851015614623578190505b61463761462f856144ef565b8301826145d6565b50505b505050565b600082821c905092915050565b600061465d6000198460080261463f565b1980831691505092915050565b6000614676838361464c565b9150826002028217905092915050565b81810361469457505061476c565b61469d826144c4565b67ffffffffffffffff8111156146b6576146b5613054565b5b6146c08254614086565b6146cb8282856145f9565b6000601f8311600181146146fa57600084156146e8578287015490505b6146f2858261466a565b865550614765565b601f198416614708876144da565b9650614713866144da565b60005b8281101561473b57848901548255600182019150600185019450602081019050614716565b868310156147585784890154614754601f89168261464c565b8355505b6001600288020188555050505b5050505050505b565b60006060830160008301516147866000860182613a0c565b506020830151848203602086015261479e8282613ce8565b915050604083015184820360408601526147b88282613ce8565b9150508091505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b600061482061481b836147f6565b614803565b9050919050565b6000815461483481614086565b61483e8186613a26565b94506001821660008114614859576001811461486f576148a2565b60ff1983168652811515602002860193506148a2565b614878856144da565b60005b8381101561489a5781548189015260018201915060208101905061487b565b808801955050505b50505092915050565b60006060830160008084015490506148c28161480d565b6148cf60008701826139fd565b506001840185830360208701526148e68382614827565b925050600284015490506148f98161480d565b61490660408701826139fd565b50819250505092915050565b600061491e83836148ab565b905092915050565b6000600382019050919050565b600061493e826147c5565b61494881856147d0565b93508360208202850161495a856147e1565b8060005b85811015614995578484038952816149768582614912565b945061498183614926565b925060208a0199505060018101905061495e565b50829750879550505050505092915050565b60006060820190506149bc6000830186614336565b81810360208301526149ce818561476e565b905081810360408301526149e28184614933565b9050949350505050565b600082825260208201905092915050565b6000614a0882613c97565b614a1281856149ec565b9350614a1d83613cb3565b8060005b83811015614a4e578151614a358882613cc3565b9750614a4083613cdb565b925050600181019050614a21565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b6000614a9382614a5b565b614a9d81856147d0565b935083602082028501614aaf85614a66565b8060005b85811015614aea57848403895281614acb8582614912565b9450614ad683614a7b565b925060208a01995050600181019050614ab3565b50829750879550505050505092915050565b600060a082019050614b116000830188614336565b8181036020830152614b2381876149fd565b90508181036040830152614b3781866149fd565b9050614b46606083018561425e565b8181036080830152614b588184614a88565b90509695505050505050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f776564600082015250565b6000614b9a602083613fda565b9150614ba582614b64565b602082019050919050565b60006020820190508181036000830152614bc981614b8d565b9050919050565b6000606082019050614be56000830186614336565b8181036020830152614bf7818561476e565b90508181036040830152614c0b8184614a88565b905094935050505056fea2646970667358221220e8b2a8f962c0d837d7ea91cdaf5e21f87e6cb271201d1663171267243e96e71f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1427,
        "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
        "label": "s",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AppStorage)3159_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)3088_storage)dyn_storage": {
        "base": "t_struct(Option)3088_storage",
        "encoding": "dynamic_array",
        "label": "struct Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)3124_storage)dyn_storage": {
        "base": "t_struct(Proposal)3124_storage",
        "encoding": "dynamic_array",
        "label": "struct Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)3097_storage)dyn_storage": {
        "base": "t_struct(Voter)3097_storage",
        "encoding": "dynamic_array",
        "label": "struct Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)703": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)3081": {
        "encoding": "inplace",
        "label": "enum ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)3077": {
        "encoding": "inplace",
        "label": "enum ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)756_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)756_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)3124_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)3124_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)3159_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3126,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3130,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3136,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "allowances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 3141,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "nonces",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Counter)756_storage)"
          },
          {
            "astId": 3144,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "larToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)703"
          },
          {
            "astId": 3146,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3151,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Proposal)3124_storage)"
          },
          {
            "astId": 3154,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalsList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3158,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalsArray",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Proposal)3124_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Counter)756_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 755,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Option)3088_storage": {
        "encoding": "inplace",
        "label": "struct Option",
        "members": [
          {
            "astId": 3083,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3085,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3087,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)3124_storage": {
        "encoding": "inplace",
        "label": "struct Proposal",
        "members": [
          {
            "astId": 3099,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3101,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3103,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3105,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3108,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)3077"
          },
          {
            "astId": 3111,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)3081"
          },
          {
            "astId": 3113,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3115,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3119,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)3088_storage)dyn_storage"
          },
          {
            "astId": 3123,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)3097_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)3097_storage": {
        "encoding": "inplace",
        "label": "struct Voter",
        "members": [
          {
            "astId": 3090,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3093,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3096,
            "contract": "contracts/facets/DaoFacet2.sol:DaoFacet2",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}